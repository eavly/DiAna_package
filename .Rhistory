substances <- reporting_rates(pids_cases, entity = entity, "substance",drug_role = drug_role)
entity="substance"
substances <- reporting_rates(pids_cases, entity = entity, "substance",drug_role = drug_role)
drug_role = c("PS", "SS", "I", "C")
substances <- reporting_rates(pids_cases, entity = entity, "substance",drug_role = drug_role)
Class4s <- reporting_rates(pids_cases, entity = entity, "Class4",drug_role = drug_role)
#' @import tidyverse
#'
#' @export
#'
#' @examples
#' \dontrun{
#' reporting_rates(pids, "reaction", "hlt")
#' reporting_rates(pids, "indication", "pt")
#' reporting_rates(pids, entity = "substance", level = "Class3")
#' }
reporting_rates <- function(pids_cases, entity = "reaction", level = "pt", drug_role = c("PS", "SS", "I", "C"), drug_indi = NA) {
if (entity == "reaction") {
temp <- import("REAC", pids = pids_cases, save_in_environment = FALSE)
} else if (entity == "indication") {
temp <- import("INDI", pids = pids_cases, save_in_environment = FALSE)
if (sum(!is.na(drug_indi)) > 0) {
temp <- import("DRUG", pids = pids_cases, save_in_environment = FALSE)[
temp,
on = c("primaryid", "drug_seq")
][substance %in% drug_indi]
}
temp <- temp[, .(primaryid, pt = indi_pt)][!pt %in% c(
"product used for unknown indication",
"therapeutic procedures nec",
"therapeutic procedures and supportive care nec"
)]
} else if (entity == "substance") {
temp <- distinct(import("DRUG", pids = pids_cases, save_in_environment = FALSE)[
role_cod %in% drug_role
][, .(primaryid, substance)])
}
if (level %in% c("hlt", "hlgt", "soc")) {
import_MedDRA()
temp <- distinct(distinct(MedDRA[, c("pt", level), with = FALSE])[
temp,
on = "pt"
][
, c("primaryid", level),
with = FALSE
])
}
if (entity == "substance") {
if (level == "pt") {
level <- "substance"
} else if (level %in% c("Class1", "Class2", "Class3", "Class4")) {
import_ATC()[code == primary_code]
temp <- distinct(distinct(ATC[, c("substance", level), with = FALSE])[
temp, on = "substance"
][
, c("primaryid", level),
with = FALSE
])
}
}
temp <- temp[, .N, by = get(level)][order(-N)][, perc := N / length(unique(temp$primaryid))]
colnames(temp) <- c(level, "N", "perc")
temp <- temp[, label := paste0(get(level), " (", round(perc * 100, 2), "%) [", N, "]")]
temp <- temp[, .(get(level), label, N)]
if (level != "substance") {
temp[is.na(V1)]$label <- NA
}
colnames(temp) <- c(
level, paste0("label_", level),
paste0("N_", level)
)
return(temp)
}
hierarchycal_rates(pids_cases,"substance")
# we describe cooccurrences
reporting_rates(pids_cases,entity="reaction")
# we describe cooccurrences
head(reporting_rates(pids_cases,entity="reaction"))
# we describe cooccurrences
head(reporting_rates(pids_cases,entity="reaction")$pt)
# we describe cooccurrences
head(reporting_rates(pids_cases,entity="reaction"))
#' @import tidyverse
#'
#' @export
#'
#' @examples
#' \dontrun{
#' reporting_rates(pids, "reaction", "hlt")
#' reporting_rates(pids, "indication", "pt")
#' reporting_rates(pids, entity = "substance", level = "Class3")
#' }
reporting_rates <- function(pids_cases, entity = "reaction", level = "pt", drug_role = c("PS", "SS", "I", "C"), drug_indi = NA) {
if (entity == "reaction") {
temp <- import("REAC", pids = pids_cases, save_in_environment = FALSE)
} else if (entity == "indication") {
temp <- import("INDI", pids = pids_cases, save_in_environment = FALSE)
if (sum(!is.na(drug_indi)) > 0) {
temp <- import("DRUG", pids = pids_cases, save_in_environment = FALSE)[
temp,
on = c("primaryid", "drug_seq")
][substance %in% drug_indi]
}
temp <- temp[, .(primaryid, pt = indi_pt)][!pt %in% c(
"product used for unknown indication",
"therapeutic procedures nec",
"therapeutic procedures and supportive care nec"
)]
} else if (entity == "substance") {
temp <- distinct(import("DRUG", pids = pids_cases, save_in_environment = FALSE)[
role_cod %in% drug_role
][, .(primaryid, substance)])
}
if (level %in% c("hlt", "hlgt", "soc")) {
import_MedDRA()
temp <- distinct(distinct(MedDRA[, c("pt", level), with = FALSE])[
temp,
on = "pt"
][
, c("primaryid", level),
with = FALSE
])
}
if (entity == "substance") {
if (level == "pt") {
level <- "substance"
} else if (level %in% c("Class1", "Class2", "Class3", "Class4")) {
import_ATC()[code == primary_code]
temp <- distinct(distinct(ATC[, c("substance", level), with = FALSE])[
temp, on = "substance"
][
, c("primaryid", level),
with = FALSE
])
}
}
temp <- distinct(temp)[, .N, by = get(level)][order(-N)][, perc := N / length(unique(temp$primaryid))]
colnames(temp) <- c(level, "N", "perc")
temp <- temp[, label := paste0(get(level), " (", round(perc * 100, 2), "%) [", N, "]")]
temp <- temp[, .(get(level), label, N)]
if (level != "substance") {
temp[is.na(V1)]$label <- NA
}
colnames(temp) <- c(
level, paste0("label_", level),
paste0("N_", level)
)
return(temp)
}
# we describe cooccurrences
head(reporting_rates(pids_cases,entity="reaction"))
# we describe indications for haloperidol
head(reporting_rates(pids_cases,entity="reaction", drug_indi = "haloperidol"))
# we describe indications for haloperidol
head(reporting_rates(pids_cases,entity="indication", drug_indi = "haloperidol"))
# we describe concomitant suspected of the event according to the ATC classification
head(hierarchycal_rates(pids_cases,"substance", drug_role = c("PS","SS")))
library(devtools)
styler::style_dir()
document()
load_all()
library(devtools)
styler::style_dir()
document()
rlang::last_trace()
library(devtools)
styler::style_dir()
document()
load_all()
remove.packages("DiAna")
library(devtools)
styler::style_dir()
document()
load_all()
install()
get_drugnames(drugs_selected)
FAERS_version <- "23Q1"
get_drugnames(drugs_selected)
drugs_selected <- "haloperidol"
get_drugnames(drugs_selected)
get_drugnames(drugs_selected)
print(get_drugnames(drugs_selected))
t <- get_drugnames(drugs_selected)
View(t)
knitr::kable(head(t,100), caption = "Example of drugnames")
use_r("network_analysis")
library(devtools)
use_r("network_analysis")
network_analysis <- function(pids, entity="reaction",remove_singlet=TRUE,
remove_negative_edges=TRUE,
file_name=paste0(project_path,"network.tiff"),width=1500, height=1500){
if (entity=="reaction") {
df <-  import("REAC",pids = pids)[,.(primaryid,pt)]
} else if (entity=="indication") {
df <- import("INDI",pids = pids)
} else if (entity == "substance") {
df <- import("DRUG",pids = pids)[,.(primaryid,substance)]}
df <- distinct(df)
binary_data <- df
binary_data$value <- 1
binary_data <- binary_data %>% pivot_wider(names_from = pt,
values_from = value)
row_names <- binary_data$primaryid
binary_data <- binary_data %>% select(-primaryid) %>% as.matrix()
rownames(binary_data) <- row_names
binary_data[is.na(binary_data[,])] <- 0
g1 <- IsingFit::IsingFit(binary_data)
G_igraph <- igraph::graph.adjacency(g1$weiadj,mode = "undirected",weighted = TRUE)
if (remove_singlet){G_igraph <- igraph::delete.vertices(simplify(G_igraph), igraph::degree(G_igraph)==0)}
if (remove_negative_edges){G_igraph <- igraph::delete.edges(G_igraph,which(E(G_igraph)$weight<0))}
L0=layout_nicely(G_igraph)
comm_lv <- cluster_louvain(G_igraph)
t <- as.numeric(names(table(membership(comm_lv))[table(membership(comm_lv))==1]))
cols=comm_lv$membership
cols[cols%in% t] <- 100
G_igraph <- set_vertex_attr(G_igraph,"color",value = cols)
G_igraph <- set_vertex_attr(G_igraph,"group",value = factor(cols))
labs1 <- df[,.N,by="pt"][order(-N)][,.(s=pt,s2=N)]
labs <- data.table(s=V(G_igraph)$name)
labs <- left_join(labs,labs1)
G_igraph <- set_vertex_attr(G_igraph,"size",value = log(labs$s2))
G_igraph <- set_vertex_attr(G_igraph,"label",value = labs$s)
tiff(file_name,width = width,height=height,res=300)
plot(comm_lv,G_igraph,layout=L0,label=labs$s,vertex.label.dist=1,                           # Distance between the label and the vertex
vertex.label.degree=pi/2)
dev.off()
}
network_analysis(pids_cases)
library(DiAna)
network_analysis(pids_cases)
# Set up ----------------------------------------------------------------------
dir.create(paste0(here::here(), "/projects/tutorial"), recursive = TRUE)
FAERS_version <- "23Q1"
DiAna_path <- here::here()
project_path <- paste0(DiAna_path, "/projects/tutorial/")
## Packages -------------------------------------------------------------------
library(DiAna)
## Input FAERS ---------------------------------------------------------------
import("DRUG")
## Input FAERS ---------------------------------------------------------------
import("DRUG")
import("REAC")
import("DEMO")
import("INDI")
import_ATC()
drugs_selected <- "haloperidol"
events_selected <- "pneumonia"
# we identify the reports with the drug
pids_drugs <- unique(Drug[substance %in% drugs_selected]$primaryid)
# we identify cases as reports with both the drug and the event
pids_cases <- intersect(pids_drugs, pids_events)
# we identify the reports with the event
pids_events <- unique(Reac[pt %in% events_selected]$primaryid)
# we identify cases as reports with both the drug and the event
pids_cases <- intersect(pids_drugs, pids_events)
network_analysis(pids_cases)
network_analysis <- function(pids, entity="reaction",remove_singlet=TRUE,
remove_negative_edges=TRUE,
file_name=paste0(project_path,"network.tiff"),width=1500, height=1500){
if (entity=="reaction") {
df <-  import("REAC",pids = pids)[,.(primaryid,pt)]
} else if (entity=="indication") {
df <- import("INDI",pids = pids)
} else if (entity == "substance") {
df <- import("DRUG",pids = pids)[,.(primaryid,substance)]}
df <- distinct(df)
binary_data <- df
binary_data$value <- 1
binary_data <- binary_data %>% pivot_wider(names_from = pt,
values_from = value)
row_names <- binary_data$primaryid
binary_data <- binary_data %>% select(-primaryid) %>% as.matrix()
rownames(binary_data) <- row_names
binary_data[is.na(binary_data[,])] <- 0
g1 <- IsingFit::IsingFit(binary_data)
G_igraph <- igraph::graph.adjacency(g1$weiadj,mode = "undirected",weighted = TRUE)
if (remove_singlet){G_igraph <- igraph::delete.vertices(simplify(G_igraph), igraph::degree(G_igraph)==0)}
if (remove_negative_edges){G_igraph <- igraph::delete.edges(G_igraph,which(E(G_igraph)$weight<0))}
L0=layout_nicely(G_igraph)
comm_lv <- cluster_louvain(G_igraph)
t <- as.numeric(names(table(membership(comm_lv))[table(membership(comm_lv))==1]))
cols=comm_lv$membership
cols[cols%in% t] <- 100
G_igraph <- set_vertex_attr(G_igraph,"color",value = cols)
G_igraph <- set_vertex_attr(G_igraph,"group",value = factor(cols))
labs1 <- df[,.N,by="pt"][order(-N)][,.(s=pt,s2=N)]
labs <- data.table(s=V(G_igraph)$name)
labs <- left_join(labs,labs1)
G_igraph <- set_vertex_attr(G_igraph,"size",value = log(labs$s2))
G_igraph <- set_vertex_attr(G_igraph,"label",value = labs$s)
p <- plot(comm_lv,G_igraph,layout=L0,label=labs$s,vertex.label.dist=1,                           # Distance between the label and the vertex
vertex.label.degree=pi/2)
tiff(file_name,width = width,height=height,res=300)
p
dev.off()
plot(p)
}
t <- network_analysis(sample(pids_cases,1000))
t <- network_analysis(pids_cases)
library(NetworkToolbox)
library(visNetwork)
library(qgraph)
library(igraph)
library(IsingFit)
t <- network_analysis(pids_cases)
pids=pids_cases
entity="reaction"
remove_singlet=TRUE
remove_negative_edges=TRUE
file_name=paste0(project_path,"network.tiff")
width=1500
height=1500
if (entity=="reaction") {
df <-  import("REAC",pids = pids)[,.(primaryid,pt)]
} else if (entity=="indication") {
df <- import("INDI",pids = pids)
} else if (entity == "substance") {
df <- import("DRUG",pids = pids)[,.(primaryid,substance)]}
df <- distinct(df)
binary_data <- df
binary_data$value <- 1
binary_data <- binary_data %>% pivot_wider(names_from = pt,
values_from = value)
row_names <- binary_data$primaryid
binary_data <- binary_data %>% select(-primaryid) %>% as.matrix()
rownames(binary_data) <- row_names
binary_data[is.na(binary_data[,])] <- 0
g1 <- IsingFit::IsingFit(binary_data)
G_igraph <- igraph::graph.adjacency(g1$weiadj,mode = "undirected",weighted = TRUE)
if (remove_singlet){G_igraph <- igraph::delete.vertices(simplify(G_igraph), igraph::degree(G_igraph)==0)}
if (remove_negative_edges){G_igraph <- igraph::delete.edges(G_igraph,which(E(G_igraph)$weight<0))}
L0=layout_nicely(G_igraph)
comm_lv <- cluster_louvain(G_igraph)
t <- as.numeric(names(table(membership(comm_lv))[table(membership(comm_lv))==1]))
cols=comm_lv$membership
cols[cols%in% t] <- 100
G_igraph <- set_vertex_attr(G_igraph,"color",value = cols)
G_igraph <- set_vertex_attr(G_igraph,"group",value = factor(cols))
labs1 <- df[,.N,by="pt"][order(-N)][,.(s=pt,s2=N)]
labs <- data.table(s=V(G_igraph)$name)
labs <- left_join(labs,labs1)
G_igraph <- set_vertex_attr(G_igraph,"size",value = log(labs$s2))
G_igraph <- set_vertex_attr(G_igraph,"label",value = labs$s)
p <- plot(comm_lv,G_igraph,layout=L0,label=labs$s,vertex.label.dist=1,                           # Distance between the label and the vertex
vertex.label.degree=pi/2)
tiff(file_name,width = width,height=height,res=300)
plot(comm_lv,G_igraph,layout=L0,label=labs$s,vertex.label.dist=1,                           # Distance between the label and the vertex
vertex.label.degree=pi/2)
dev.off()
plot(comm_lv,G_igraph,layout=L0,label=labs$s,vertex.label.dist=1,                           # Distance between the label and the vertex
vertex.label.degree=pi/2)
network_analysis <- function(pids, entity="reaction",remove_singlet=TRUE,
remove_negative_edges=TRUE,
file_name=paste0(project_path,"network.tiff"),width=1500, height=1500){
if (entity=="reaction") {
df <-  import("REAC",pids = pids)[,.(primaryid,pt)]
} else if (entity=="indication") {
df <- import("INDI",pids = pids)
} else if (entity == "substance") {
df <- import("DRUG",pids = pids)[,.(primaryid,substance)]}
df <- distinct(df)
binary_data <- df
binary_data$value <- 1
binary_data <- binary_data %>% pivot_wider(names_from = pt,
values_from = value)
row_names <- binary_data$primaryid
binary_data <- binary_data %>% select(-primaryid) %>% as.matrix()
rownames(binary_data) <- row_names
binary_data[is.na(binary_data[,])] <- 0
g1 <- IsingFit::IsingFit(binary_data)
G_igraph <- igraph::graph.adjacency(g1$weiadj,mode = "undirected",weighted = TRUE)
if (remove_singlet){G_igraph <- igraph::delete.vertices(simplify(G_igraph), igraph::degree(G_igraph)==0)}
if (remove_negative_edges){G_igraph <- igraph::delete.edges(G_igraph,which(E(G_igraph)$weight<0))}
L0=layout_nicely(G_igraph)
comm_lv <- cluster_louvain(G_igraph)
t <- as.numeric(names(table(membership(comm_lv))[table(membership(comm_lv))==1]))
cols=comm_lv$membership
cols[cols%in% t] <- 100
G_igraph <- set_vertex_attr(G_igraph,"color",value = cols)
G_igraph <- set_vertex_attr(G_igraph,"group",value = factor(cols))
labs1 <- df[,.N,by="pt"][order(-N)][,.(s=pt,s2=N)]
labs <- data.table(s=V(G_igraph)$name)
labs <- left_join(labs,labs1)
G_igraph <- set_vertex_attr(G_igraph,"size",value = log(labs$s2))
G_igraph <- set_vertex_attr(G_igraph,"label",value = labs$s)
tiff(file_name,width = width,height=height,res=300)
plot(comm_lv,G_igraph,layout=L0,label=labs$s,vertex.label.dist=1,                           # Distance between the label and the vertex
vertex.label.degree=pi/2)
dev.off()
plot(comm_lv,G_igraph,layout=L0,label=labs$s,vertex.label.dist=1,                           # Distance between the label and the vertex
vertex.label.degree=pi/2)
}
width=5000
height=5000
tiff(file_name,width = width,height=height,res=300)
plot(comm_lv,G_igraph,layout=L0,label=labs$s,vertex.label.dist=1,                           # Distance between the label and the vertex
vertex.label.degree=pi/2)
dev.off()
![](images/network.tiff)
DT::datatables(t)
install.packages(DT)
install.packages("DT")
DT::datatables(t)
DT::datatable(t)
t <- get_drugnames(drugs_selected)
DT::datatable(t)
library(devtools)
styler::style_dir()
# usethis::use_tidy_description()
document()
load_all()
install()
library(devtools)
styler::style_dir()
document()
load_all()
install()
tiff(file_name, width = width, height = height, res = 300)
plot(comm_lv, G_igraph,
layout = L0, label = labs$s, vertex.label.dist = .5, # Distance between the label and the vertex
vertex.label.degree = pi / 2
)
dev.off()
tiff(file_name, width = width, height = height, res = 300)
plot(comm_lv, G_igraph,
layout = L0, label = labs$s, vertex.label.dist = .5, # Distance between the label and the vertex
vertex.label.degree = pi / 2
)
dev.off()
tiff(file_name, width = width, height = height, res = 300)
plot(comm_lv, G_igraph,
layout = L0, label = labs$s, vertex.label.dist = .3, # Distance between the label and the vertex
vertex.label.degree = pi / 2
)
dev.off()
tiff(file_name, width = width, height = height, res = 300)
plot(comm_lv, G_igraph,
layout = L0, label = labs$s, vertex.label.dist = .4, # Distance between the label and the vertex
vertex.label.degree = pi / 2
)
dev.off()
network_analysis <- function(pids, entity = "reaction", remove_singlet = TRUE,
remove_negative_edges = TRUE,
file_name = paste0(project_path, "network.tiff"), width = 1500, height = 1500) {
if (entity == "reaction") {
df <- import("REAC", pids = pids)[, .(primaryid, pt)]
} else if (entity == "indication") {
df <- import("INDI", pids = pids)
} else if (entity == "substance") {
df <- import("DRUG", pids = pids)[, .(primaryid, substance)]
}
df <- distinct(df)
binary_data <- df
binary_data$value <- 1
binary_data <- binary_data %>% pivot_wider(
names_from = pt,
values_from = value
)
row_names <- binary_data$primaryid
binary_data <- binary_data %>%
select(-primaryid) %>%
as.matrix()
rownames(binary_data) <- row_names
binary_data[is.na(binary_data[, ])] <- 0
g1 <- IsingFit::IsingFit(binary_data)
G_igraph <- igraph::graph.adjacency(g1$weiadj, mode = "undirected", weighted = TRUE)
if (remove_singlet) {
G_igraph <- igraph::delete.vertices(simplify(G_igraph), igraph::degree(G_igraph) == 0)
}
if (remove_negative_edges) {
G_igraph <- igraph::delete.edges(G_igraph, which(E(G_igraph)$weight < 0))
}
L0 <- layout_nicely(G_igraph)
comm_lv <- cluster_louvain(G_igraph)
t <- as.numeric(names(table(membership(comm_lv))[table(membership(comm_lv)) == 1]))
cols <- comm_lv$membership
cols[cols %in% t] <- 100
G_igraph <- set_vertex_attr(G_igraph, "color", value = cols)
G_igraph <- set_vertex_attr(G_igraph, "group", value = factor(cols))
labs1 <- df[, .N, by = "pt"][order(-N)][, .(s = pt, s2 = N)]
labs <- data.table(s = V(G_igraph)$name)
labs <- left_join(labs, labs1)
G_igraph <- set_vertex_attr(G_igraph, "size", value = log(labs$s2))
G_igraph <- set_vertex_attr(G_igraph, "label", value = labs$s)
tiff(file_name, width = width, height = height, res = 300)
plot(comm_lv, G_igraph,
layout = L0, label = labs$s, vertex.label.dist = .4, # Distance between the label and the vertex
vertex.label.degree = pi / 2
)
dev.off()
}
library(devtools)
styler::style_dir()
document()
load_all()
install()
library(devtools)
styler::style_dir()
document()
load_all()
remove.packages("DiAna")
install()
library(devtools)
styler::style_dir()
document()
load_all()
library(devtools)
styler::style_dir()
document()
load_all()
test()
install()
