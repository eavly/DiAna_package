temp[, Submission := ifelse(rept_cod %in% c("30DAY", "5DAY", "EXP"), "Expedited",
ifelse(rept_cod == "PER", "Periodic",
"Direct"
)
)]
temp[, Reporter := ifelse(occp_cod == "CN", "Consumer",
ifelse(occp_cod == "MD", "Physician",
ifelse(occp_cod == "HP", "Healthcare practitioner",
ifelse(occp_cod == "PH", "Pharmacist",
ifelse(occp_cod == "LW", "Lawyer",
ifelse(occp_cod == "OT", "Other",
NA
)
)
)
)
)
)]
temp[, age_in_years := age_in_days / 365]
temp[, age_range := cut(age_in_days, c(0, 28, 730, 4380, 6570, 10950, 18250, 23725, 27375, 31025, 36500, 73000),
include.lowest = TRUE, right = FALSE,
labels = c(
"Neonate (<28d)", "Infant (28d-<2y)", "Child (2y-<12y)", "Teenager (12y-<18y)", "Adult (18y-<30y)", "Adult (30y-<50y)",
"Adult (50y-<65y)", "Elderly (65y-<75y)", "Elderly (75y-<85y)", "Elderly (85y-<100y)", "Elderly (â‰¥100y)"
)
)]
temp <- temp_outc[, .(Outcome = max(outc_cod)), by = "primaryid"][temp, on = "primaryid"]
temp[is.na(Outcome)]$Outcome <- "Non Serious"
levels(temp$Outcome) <- c("Other serious", "Congenital anomaly", "Hospitalization", "Required intervention", "Disability", "Life threatening", "Death", "Non Serious")
temp$Outcome <- factor(temp$Outcome, levels = c("Death", "Life threatening", "Disability", "Required intervention", "Hospitalization", "Congenital anomaly", "Other serious", "Non Serious"), ordered = TRUE)
suppressMessages(country_codes <- setDT(read_delim(paste0(paste0(here(), "/external_sources/Countries.csv")), ";", escape_double = FALSE, trim_ws = TRUE, show_col_types = FALSE))[
, .(country = Country_Name, continent = Continent_Name)
][!is.na(country)] %>% distinct())
temp[, country := ifelse(is.na(as.character(occr_country)), as.character(reporter_country), as.character(occr_country))]
temp <- country_codes[temp, on = "country"]
temp$country <- as.factor(temp$country)
temp$continent <- factor(temp$continent, levels = c("North America", "Europe", "Asia", "South America", "Oceania", "Africa"), ordered = TRUE)
temp <- temp_reac[, .N, by = "primaryid"][, .(primaryid, Reactions = N)][temp, on = "primaryid"]
temp <- temp_drug[, .N, by = "primaryid"][, .(primaryid, Substances = N)][temp, on = "primaryid"]
temp <- temp_indi[, .N, by = "primaryid"][, .(primaryid, Indications = N)][temp, on = "primaryid"]
temp_tto <- temp_drug[temp_ther, on = c("primaryid", "drug_seq")][substance %in% drug]
suppressWarnings(temp_tto[, role_cod := max(role_cod), by = "primaryid"])
temp_tto <- temp_tto[!is.na(time_to_onset) & time_to_onset >= 0]
suppressWarnings(temp_tto <- temp_tto[, .(time_to_onset = max(time_to_onset)), by = "primaryid"])
temp <- temp_tto[temp, on = "primaryid"]
temp$time_to_onset <- as.numeric(temp$time_to_onset)
temp[, year := as.factor(ifelse(!is.na(event_dt),
as.numeric(substr(event_dt, 1, 4)), ifelse(!is.na(init_fda_dt),
as.numeric(substr(init_fda_dt, 1, 4)), as.numeric(substr(fda_dt, 1, 4))
)
))]
# add the max role_cod for the drug
if (!is.null(drug)) {
temp_drug <- temp_drug[primaryid %in% pids_tot][substance %in% drug][
, role_cod := factor(role_cod, levels = c("C", "I", "SS", "PS"), ordered = TRUE)][
, .(role_cod = max(role_cod)), by = "primaryid"]
suppressMessages(temp <- left_join(temp, temp_drug))
} else {
vars <- setdiff(vars, c("role_cod","time_to_onset"))
print("Variables role_cod and time_to_onset not considered. If you want to include them please provide the drug investigated")
}
# descriptive only cases
if (is.null(RG)) {
# select the vars
temp <- temp[, ..vars]
t <- temp %>%
tbl_summary(statistic = list(
all_continuous() ~ "{median} ({p25}-{p75}) [{min}-{max}]",
all_categorical() ~ "{n};{p}"
), digits = colnames(temp) ~ c(0, 2)) # %>%
# format the table
gt_table <- t %>% as_tibble()
tempN_cases <- as.numeric(gsub("\\*\\*", "", gsub(".*N = ", "", colnames(gt_table)[[2]])))
suppressWarnings(gt_table <- gt_table %>% separate(get(colnames(gt_table)[[2]]),
sep = ";",
into = c("N_cases", "%_cases")
))
gt_table <- rbind(c("N", tempN_cases, ""), gt_table)
# save it to the excel
writexl::write_xlsx(gt_table, file_name)
hierarchycal_rates(pids_cases, entity = "substance", "substances.xlsx")
if (exists("MedDRA")) {
hierarchycal_rates(pids_cases, entity = "reaction", "reactions.xlsx")
hierarchycal_rates(pids_cases, entity = "indication", "indications.xlsx")
} else {
write_xlsx(reporting_rates(pids_cases, "reaction"), "reactions.xlsx")
write_xlsx(reporting_rates(pids_cases, "indication"), "indications.xlsx")
}
} else {
# descriptives cases and non-cases
vars <- c(vars, "Group", names(list_pids))
suppressWarnings(temp[, Group := ifelse(primaryid %in% pids_cases, "Cases", "Non-Cases")])
if (method == "goodness_of_fit") {
temp <- rbindlist(list(temp, temp[Group == "Cases"][, Group := "Non-Cases"]))
}
if (!is.null(names(list_pids))) {
for (n in 1:length(list_pids)) {
temp[[names(list_pids)[[n]]]] <- temp$primaryid %in% list_pids[[n]]
}
}
temp <- temp[, ..vars]
# perform the descriptive analysis
suppressMessages(t <- temp %>%
tbl_summary(
by = Group, statistic = list(
all_continuous() ~ "{median} ({p25}-{p75}) [{min}-{max}] {p_nonmiss}",
all_continuous2() ~ "{median} ({p25}-{p75}) [{min}-{max}] {p_nonmiss}",
all_categorical() ~ "{n};{p}"
),
digits = colnames(temp) ~ c(0, 2)
) %>%
add_p(
test = list(all_categorical() ~ "fisher.test.simulate.p.values"), # this applies the custom test to all categorical variables
pvalue_fun = function(x) style_pvalue(x, digits = 3)
) %>%
add_q("holm") %>%
bold_labels())
# format the table
gt_table <- t %>% as_tibble()
tempN_cases <- as.numeric(gsub(",", "", gsub(".*N = ", "", colnames(gt_table)[[2]])))
tempN_controls <- as.numeric(gsub(",", "", gsub(".*N = ", "", colnames(gt_table)[[3]])))
suppressWarnings(gt_table <- gt_table %>% separate(get(colnames(gt_table)[[2]]),
sep = ";",
into = c("N_cases", "%_cases")
))
suppressWarnings(gt_table <- gt_table %>% separate(get(colnames(gt_table)[[4]]),
sep = ";",
into = c("N_controls", "%_controls")
))
gt_table <- rbind(c("N", tempN_cases, "", tempN_controls, "", "", ""), gt_table)
# save it to the excel
writexl::write_xlsx(gt_table, file_name)
}
}
descriptive(pids_cases,RG=pids_drug,drug = drug_selected)
DPA_df <- disproportionality_analysis( # perform disproportionality analysis
drug_selected,
reac_selected
)
render_forest(DPA_df, "IC",
row = "event"
)
RG <- Demo[sex=="M"]
RG <- Demo[sex=="M"]$primaryid
DPA_df <- disproportionality_analysis( # perform disproportionality analysis
drug_selected,
reac_selected,
restriction=RG
)
View(MedDRA)
render_forest(DPA_df, "IC",
row = "event"
)
library(devtools)
styler::style_dir()
document()
load_all()
check()
install()
remove.packages("DiAna")
install()
library(devtools)
document()
load_all()
install()
#'                    which includes the entire population).
#' @param ROR_minimum_cases Threshold of minimum cases for calculating Reporitng Odds Ratio (default is 3).
#' @param IC_threshold Threshold for defining the significance of Information Component (default is 0).
#' @param ROR_threshold Threshold for defining the significance of Reporting Odds Ratio (default is 1).
#'
#' @return A data.table containing disproportionality analysis results.
#'
#' @importFrom questionr odds.ratio
#'
#' @export
disproportionality_analysis <- function(
drug_selected, reac_selected,
temp_d = Drug, temp_r = Reac,
meddra_level = "pt",
restriction = "none",
ROR_minimum_cases = 3,
ROR_threshold = 1,
IC_threshold = 0) {
if (length(restriction) > 1) {
temp_d <- temp_d[primaryid %in% restriction] %>% droplevels()
temp_r <- temp_r[primaryid %in% restriction] %>% droplevels()
}
if (meddra_level != "pt" & meddra_level != "custom") {
if (!exists("MedDRA")) {
stop("The MedDRA dictionary is not uploaded.
Without it, only analyses at the PT level are possible")
}
temp_r <- MedDRA[, c(meddra_level, "pt"), with = FALSE][temp_r, on = "pt"]
}
if (meddra_level == "custom") {
df_custom <- data.table(
custom = rep(names(reac_selected), lengths(reac_selected)),
pt = unlist(reac_selected)
)
temp_r <- df_custom[temp_r, on = "pt"]
reac_selected <- names(reac_selected)
}
if (drug_level == "custom") {
df_custom <- data.table(
custom = rep(names(drug_selected), lengths(drug_selected)),
substance = unlist(drug_selected)
)
temp_r <- df_custom[temp_r, on = "pt"]
reac_selected <- names(reac_selected)
}
temp_r <- temp_r[, c(meddra_level, "primaryid"), with = FALSE] %>% distinct()
temp_d <- temp_d[, .(substance, primaryid)] %>% distinct()
TOT <- length(unique(temp_d$primaryid))
temp_d1 <- temp_d[substance %in% drug_selected][, .(primaryid_substance = list(primaryid)), by = "substance"]
temp_r1 <- temp_r[get(meddra_level) %in% reac_selected][, .(primaryid_event = list(primaryid)), by = meddra_level]
colnames(temp_r1) <- c("event", "primaryid_event")
results <- setDT(expand.grid("substance" = unlist(drug_selected), "event" = unlist(reac_selected)))
results <- results[temp_d1, on = "substance"]
results <- results[temp_r1, on = "event"]
results <- results[, D_E := as.numeric(map2(primaryid_substance, primaryid_event, \(x, y)length(intersect(x, y))))]
results <- results[, D_nE := as.numeric(map2(primaryid_substance, primaryid_event, \(x, y)length(setdiff(x, y))))]
results <- results[, D := D_E + D_nE]
results <- results[, nD_E := as.numeric(map2(primaryid_event, primaryid_substance, \(x, y)length(setdiff(x, y))))]
results <- results[, E := D_E + nD_E]
results <- results[, nD_nE := TOT - (D_E + D_nE + nD_E)]
ROR <- lapply(seq(1:nrow(results)), function(x) {
tab <- as.matrix(data.table(
E = c(results$nD_E[[x]], results$nD_E[[x]]),
nE = c(results$D_nE[[x]], results$nD_nE[[x]])
))
or <- questionr::odds.ratio(tab)
ROR_median <- floor(or$OR * 100) / 100
ROR_lower <- floor(or$`2.5 %` * 100) / 100
ROR_upper <- floor(or$`97.5 %` * 100) / 100
p_value_fisher <- or$p
return(list(ROR_median, ROR_lower, ROR_upper, p_value_fisher))
})
results <- results[, ROR_median := as.numeric(map(ROR, \(x) x[[1]]))][
, ROR_lower := as.numeric(map(ROR, \(x) x[[2]]))
][
, ROR_upper := as.numeric(map(ROR, \(x) x[[3]]))
][
, p_value_fisher := as.numeric(map(ROR, \(x) x[[4]]))
]
results <- results[, Bonferroni := results$p_value_fisher * sum(results$D_E >= 3)]
IC <- lapply(seq(1:nrow(results)), function(x) {
IC_median <- log2((results$D_E[[x]] + .5) / (((results$D[[x]] * results$E[[x]]) / TOT) + .5))
IC_lower <- floor((IC_median - 3.3 * (results$D_E[[x]] + .5)^(-1 / 2) - 2 * (results$D_E[[x]] + .5)^(-3 / 2)) * 100) / 100
IC_upper <- floor((IC_median + 2.4 * (results$D_E[[x]] + .5)^(-1 / 2) - 0.5 * (results$D_E[[x]] + .5)^(-3 / 2)) * 100) / 100
IC_median <- floor(IC_median * 100) / 100
return(list(IC_median, IC_lower, IC_upper))
})
results <- results[, IC_median := as.numeric(map(IC, \(x) x[[1]]))][
, IC_lower := as.numeric(map(IC, \(x) x[[2]]))
][
, IC_upper := as.numeric(map(IC, \(x) x[[3]]))
]
results <- results[, label_ROR := paste0(ROR_median, " (", ROR_lower, "-", ROR_upper, ") [", D_E, "]")]
results <- results[, label_IC := paste0(IC_median, " (", IC_lower, "-", IC_upper, ") [", D_E, "]")]
results <- results[, Bonferroni := p_value_fisher < 0.05 / nrow(results[D_E >= ROR_minimum_cases])]
results <- results[, ROR_color := ifelse(D_E < ROR_minimum_cases, "not enough cases", ifelse(is.nan(ROR_lower), "all_associated",
ifelse(ROR_lower <= ROR_threshold, "no signal",
ifelse(Bonferroni == FALSE, "light signal",
"strong signal"
)
)
))]
results <- results[, IC_color := ifelse(is.nan(IC_lower), "all_associated",
ifelse(IC_lower <= IC_threshold, "no signal",
"strong signal"
)
)]
results <- results[, ROR_color := factor(ROR_color, levels = c("not enough cases", "no signal", "light signal", "strong signal"), ordered = TRUE)]
results <- results[, IC_color := factor(IC_color, levels = c("no signal", "strong signal"), ordered = TRUE)]
}
#'                    which includes the entire population).
#' @param ROR_minimum_cases Threshold of minimum cases for calculating Reporitng Odds Ratio (default is 3).
#' @param IC_threshold Threshold for defining the significance of Information Component (default is 0).
#' @param ROR_threshold Threshold for defining the significance of Reporting Odds Ratio (default is 1).
#'
#' @return A data.table containing disproportionality analysis results.
#'
#' @importFrom questionr odds.ratio
#'
#' @export
disproportionality_analysis <- function(
drug_selected, reac_selected,
temp_d = Drug, temp_r = Reac,
meddra_level = "pt",
drug_level =NA,
restriction = "none",
ROR_minimum_cases = 3,
ROR_threshold = 1,
IC_threshold = 0) {
if (length(restriction) > 1) {
temp_d <- temp_d[primaryid %in% restriction] %>% droplevels()
temp_r <- temp_r[primaryid %in% restriction] %>% droplevels()
}
if (meddra_level != "pt" & meddra_level != "custom") {
if (!exists("MedDRA")) {
stop("The MedDRA dictionary is not uploaded.
Without it, only analyses at the PT level are possible")
}
temp_r <- MedDRA[, c(meddra_level, "pt"), with = FALSE][temp_r, on = "pt"]
}
if (meddra_level == "custom") {
df_custom <- data.table(
custom = rep(names(reac_selected), lengths(reac_selected)),
pt = unlist(reac_selected)
)
temp_r <- df_custom[temp_r, on = "pt"]
reac_selected <- names(reac_selected)
}
if (drug_level == "custom") {
df_custom <- data.table(
custom = rep(names(drug_selected), lengths(drug_selected)),
substance = unlist(drug_selected)
)
temp_r <- df_custom[temp_r, on = "pt"]
reac_selected <- names(reac_selected)
}
temp_r <- temp_r[, c(meddra_level, "primaryid"), with = FALSE] %>% distinct()
temp_d <- temp_d[, .(substance, primaryid)] %>% distinct()
TOT <- length(unique(temp_d$primaryid))
temp_d1 <- temp_d[substance %in% drug_selected][, .(primaryid_substance = list(primaryid)), by = "substance"]
temp_r1 <- temp_r[get(meddra_level) %in% reac_selected][, .(primaryid_event = list(primaryid)), by = meddra_level]
colnames(temp_r1) <- c("event", "primaryid_event")
results <- setDT(expand.grid("substance" = unlist(drug_selected), "event" = unlist(reac_selected)))
results <- results[temp_d1, on = "substance"]
results <- results[temp_r1, on = "event"]
results <- results[, D_E := as.numeric(map2(primaryid_substance, primaryid_event, \(x, y)length(intersect(x, y))))]
results <- results[, D_nE := as.numeric(map2(primaryid_substance, primaryid_event, \(x, y)length(setdiff(x, y))))]
results <- results[, D := D_E + D_nE]
results <- results[, nD_E := as.numeric(map2(primaryid_event, primaryid_substance, \(x, y)length(setdiff(x, y))))]
results <- results[, E := D_E + nD_E]
results <- results[, nD_nE := TOT - (D_E + D_nE + nD_E)]
ROR <- lapply(seq(1:nrow(results)), function(x) {
tab <- as.matrix(data.table(
E = c(results$nD_E[[x]], results$nD_E[[x]]),
nE = c(results$D_nE[[x]], results$nD_nE[[x]])
))
or <- questionr::odds.ratio(tab)
ROR_median <- floor(or$OR * 100) / 100
ROR_lower <- floor(or$`2.5 %` * 100) / 100
ROR_upper <- floor(or$`97.5 %` * 100) / 100
p_value_fisher <- or$p
return(list(ROR_median, ROR_lower, ROR_upper, p_value_fisher))
})
results <- results[, ROR_median := as.numeric(map(ROR, \(x) x[[1]]))][
, ROR_lower := as.numeric(map(ROR, \(x) x[[2]]))
][
, ROR_upper := as.numeric(map(ROR, \(x) x[[3]]))
][
, p_value_fisher := as.numeric(map(ROR, \(x) x[[4]]))
]
results <- results[, Bonferroni := results$p_value_fisher * sum(results$D_E >= 3)]
IC <- lapply(seq(1:nrow(results)), function(x) {
IC_median <- log2((results$D_E[[x]] + .5) / (((results$D[[x]] * results$E[[x]]) / TOT) + .5))
IC_lower <- floor((IC_median - 3.3 * (results$D_E[[x]] + .5)^(-1 / 2) - 2 * (results$D_E[[x]] + .5)^(-3 / 2)) * 100) / 100
IC_upper <- floor((IC_median + 2.4 * (results$D_E[[x]] + .5)^(-1 / 2) - 0.5 * (results$D_E[[x]] + .5)^(-3 / 2)) * 100) / 100
IC_median <- floor(IC_median * 100) / 100
return(list(IC_median, IC_lower, IC_upper))
})
results <- results[, IC_median := as.numeric(map(IC, \(x) x[[1]]))][
, IC_lower := as.numeric(map(IC, \(x) x[[2]]))
][
, IC_upper := as.numeric(map(IC, \(x) x[[3]]))
]
results <- results[, label_ROR := paste0(ROR_median, " (", ROR_lower, "-", ROR_upper, ") [", D_E, "]")]
results <- results[, label_IC := paste0(IC_median, " (", IC_lower, "-", IC_upper, ") [", D_E, "]")]
results <- results[, Bonferroni := p_value_fisher < 0.05 / nrow(results[D_E >= ROR_minimum_cases])]
results <- results[, ROR_color := ifelse(D_E < ROR_minimum_cases, "not enough cases", ifelse(is.nan(ROR_lower), "all_associated",
ifelse(ROR_lower <= ROR_threshold, "no signal",
ifelse(Bonferroni == FALSE, "light signal",
"strong signal"
)
)
))]
results <- results[, IC_color := ifelse(is.nan(IC_lower), "all_associated",
ifelse(IC_lower <= IC_threshold, "no signal",
"strong signal"
)
)]
results <- results[, ROR_color := factor(ROR_color, levels = c("not enough cases", "no signal", "light signal", "strong signal"), ordered = TRUE)]
results <- results[, IC_color := factor(IC_color, levels = c("no signal", "strong signal"), ordered = TRUE)]
}
library(devtools)
styler::style_dir()
document()
load_all()
install()
library(devtools)
load_all()
install()
#'                    which includes the entire population).
#' @param ROR_minimum_cases Threshold of minimum cases for calculating Reporitng Odds Ratio (default is 3).
#' @param IC_threshold Threshold for defining the significance of Information Component (default is 0).
#' @param ROR_threshold Threshold for defining the significance of Reporting Odds Ratio (default is 1).
#'
#' @return A data.table containing disproportionality analysis results.
#'
#' @importFrom questionr odds.ratio
#'
#' @export
disproportionality_analysis <- function(
drug_selected, reac_selected,
temp_d = Drug, temp_r = Reac,
meddra_level = "pt",
drug_level = NA,
restriction = "none",
ROR_minimum_cases = 3,
ROR_threshold = 1,
IC_threshold = 0) {
if (length(restriction) > 1) {
temp_d <- temp_d[primaryid %in% restriction] %>% droplevels()
temp_r <- temp_r[primaryid %in% restriction] %>% droplevels()
}
if (meddra_level != "pt" & meddra_level != "custom") {
if (!exists("MedDRA")) {
stop("The MedDRA dictionary is not uploaded.
Without it, only analyses at the PT level are possible")
}
temp_r <- MedDRA[, c(meddra_level, "pt"), with = FALSE][temp_r, on = "pt"]
}
if (meddra_level == "custom") {
df_custom <- data.table(
custom = rep(names(reac_selected), lengths(reac_selected)),
pt = unlist(reac_selected)
)
temp_r <- df_custom[temp_r, on = "pt"]
reac_selected <- names(reac_selected)
}
if (drug_level == "custom") {
df_custom <- data.table(
custom = rep(names(drug_selected), lengths(drug_selected)),
substance = unlist(drug_selected)
)
temp_d <- df_custom[temp_d, on = "substance"]
drug_selected <- names(drug_selected)
}
temp_r <- temp_r[, c(meddra_level, "primaryid"), with = FALSE] %>% distinct()
temp_d <- temp_d[, .(substance, primaryid)] %>% distinct()
TOT <- length(unique(temp_d$primaryid))
temp_d1 <- temp_d[substance %in% drug_selected][, .(primaryid_substance = list(primaryid)), by = "substance"]
temp_r1 <- temp_r[get(meddra_level) %in% reac_selected][, .(primaryid_event = list(primaryid)), by = meddra_level]
colnames(temp_r1) <- c("event", "primaryid_event")
results <- setDT(expand.grid("substance" = unlist(drug_selected), "event" = unlist(reac_selected)))
results <- results[temp_d1, on = "substance"]
results <- results[temp_r1, on = "event"]
results <- results[, D_E := as.numeric(map2(primaryid_substance, primaryid_event, \(x, y)length(intersect(x, y))))]
results <- results[, D_nE := as.numeric(map2(primaryid_substance, primaryid_event, \(x, y)length(setdiff(x, y))))]
results <- results[, D := D_E + D_nE]
results <- results[, nD_E := as.numeric(map2(primaryid_event, primaryid_substance, \(x, y)length(setdiff(x, y))))]
results <- results[, E := D_E + nD_E]
results <- results[, nD_nE := TOT - (D_E + D_nE + nD_E)]
ROR <- lapply(seq(1:nrow(results)), function(x) {
tab <- as.matrix(data.table(
E = c(results$nD_E[[x]], results$nD_E[[x]]),
nE = c(results$D_nE[[x]], results$nD_nE[[x]])
))
or <- questionr::odds.ratio(tab)
ROR_median <- floor(or$OR * 100) / 100
ROR_lower <- floor(or$`2.5 %` * 100) / 100
ROR_upper <- floor(or$`97.5 %` * 100) / 100
p_value_fisher <- or$p
return(list(ROR_median, ROR_lower, ROR_upper, p_value_fisher))
})
results <- results[, ROR_median := as.numeric(map(ROR, \(x) x[[1]]))][
, ROR_lower := as.numeric(map(ROR, \(x) x[[2]]))
][
, ROR_upper := as.numeric(map(ROR, \(x) x[[3]]))
][
, p_value_fisher := as.numeric(map(ROR, \(x) x[[4]]))
]
results <- results[, Bonferroni := results$p_value_fisher * sum(results$D_E >= 3)]
IC <- lapply(seq(1:nrow(results)), function(x) {
IC_median <- log2((results$D_E[[x]] + .5) / (((results$D[[x]] * results$E[[x]]) / TOT) + .5))
IC_lower <- floor((IC_median - 3.3 * (results$D_E[[x]] + .5)^(-1 / 2) - 2 * (results$D_E[[x]] + .5)^(-3 / 2)) * 100) / 100
IC_upper <- floor((IC_median + 2.4 * (results$D_E[[x]] + .5)^(-1 / 2) - 0.5 * (results$D_E[[x]] + .5)^(-3 / 2)) * 100) / 100
IC_median <- floor(IC_median * 100) / 100
return(list(IC_median, IC_lower, IC_upper))
})
results <- results[, IC_median := as.numeric(map(IC, \(x) x[[1]]))][
, IC_lower := as.numeric(map(IC, \(x) x[[2]]))
][
, IC_upper := as.numeric(map(IC, \(x) x[[3]]))
]
results <- results[, label_ROR := paste0(ROR_median, " (", ROR_lower, "-", ROR_upper, ") [", D_E, "]")]
results <- results[, label_IC := paste0(IC_median, " (", IC_lower, "-", IC_upper, ") [", D_E, "]")]
results <- results[, Bonferroni := p_value_fisher < 0.05 / nrow(results[D_E >= ROR_minimum_cases])]
results <- results[, ROR_color := ifelse(D_E < ROR_minimum_cases, "not enough cases", ifelse(is.nan(ROR_lower), "all_associated",
ifelse(ROR_lower <= ROR_threshold, "no signal",
ifelse(Bonferroni == FALSE, "light signal",
"strong signal"
)
)
))]
results <- results[, IC_color := ifelse(is.nan(IC_lower), "all_associated",
ifelse(IC_lower <= IC_threshold, "no signal",
"strong signal"
)
)]
results <- results[, ROR_color := factor(ROR_color, levels = c("not enough cases", "no signal", "light signal", "strong signal"), ordered = TRUE)]
results <- results[, IC_color := factor(IC_color, levels = c("no signal", "strong signal"), ordered = TRUE)]
}
library(devtools)
styler::style_dir()
document()
load_all()
remove.packages("DiAna")
install()
install()
