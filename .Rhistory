write.csv2(temp_indi,"indications.csv")
}
} else {
# descriptives cases and non-cases
vars=c(vars,"Group",names(list_pids))
temp[,Group:=ifelse(primaryid%in%pids_cases,"Cases","Non-Cases")]
if(method=="goodness_of_fit"){temp <- rbindlist(list(temp,temp[Group=="Cases"][,Group:="Non-Cases"]))}
if(!is.null(names(list_pids))){
for (n in 1:length(list_pids)){
temp[[names(list_pids)[[n]]]] <- temp$primaryid%in%list_pids[[n]]
}
}
#add the max role_cod for the drug
if(!is.null(drug)){
temp_drug <- Drug[primaryid%in%pids_tot][substance%in%drug][,role_cod:=factor(role_cod,levels = c("C","I","SS","PS"),ordered=TRUE)][,.(role_cod=max(role_cod)),by="primaryid"]
temp <- left_join(temp,temp_drug)
} else {
vars=c("sex","Submission","Reporter",
"age_range", "Outcome", "country",
"continent", "age_in_years",
"wt_in_kgs","Reactions",
"Indications","Substances","year", "Group")
print("Variables role_cod and time_to_onset not considered")
}
temp <- temp[,..vars]
#perform the descriptive analysis
t <- temp %>%
tbl_summary(by=Group, statistic=list(
all_continuous()~ "{median} ({p25}-{p75}) [{min}-{max}] {p_nonmiss}}",
all_continuous2()~ "{median} ({p25}-{p75}) [{min}-{max}] {p_nonmiss}}",
all_categorical()~ "{n};{p}"),
digits=colnames(temp)~c(0,2))%>% add_p(
test = list(all_categorical() ~ "fisher.test.simulate.p.values"),  # this applies the custom test to all categorical variables
pvalue_fun =function(x)style_pvalue(x, digits = 3)
)  %>%
add_q("holm") %>%
bold_labels()
#format the table
gt_table <- t %>% as_tibble()
colnames(gt_table)
tempN_cases <- as.numeric(gsub(".*N = ", "", colnames(gt_table)[[2]]))
tempN_controls <- as.numeric(gsub(",","",gsub(".*N = ", "", colnames(gt_table)[[3]])))
gt_table <- gt_table %>% separate(get(colnames(gt_table)[[2]]),
sep = ";",
into = c("N_cases","%_cases"))
gt_table <- gt_table %>% separate(get(colnames(gt_table)[[4]]),
sep = ";",
into = c("N_controls","%_controls"))
gt_table <- rbind(c("N",tempN_cases,"",tempN_controls,"","",""),gt_table)
#save it to the excel
writexl::write_xlsx(gt_table, file_name)
}
}
describe_sample(pids_cases = pids_cases)
#import packages -------------------------------------------------------------------
library(DiAna)
# upload FAERS data ---------------------------------------------------------------
import("DEMO","23Q1")
import("DRUG","23Q1")
import("REAC","23Q1")
import("INDI","23Q1")
View(Reac[,.N,by="pt"])
View(Drug[,.N,by="substance"])
# case study 1: reports with death as adverse event ----------------------------
# browsing Reac database (line 12) we identified some pts referred to death
# narrow selection
cases_death = Reac[pt=="death"]$primaryid
# case study 1: reports with death as adverse event ----------------------------
# browsing Reac database (line 12) we identified some pts referred to death
# narrow selection
cases_death = unique(Reac[pt=="death"]$primaryid) #
# broad selection
cases_death = Reac[pt %in% c("death", "sudden death")]$primaryid # 664268 pts
# case study 2: reports with gambling as adverse event -------------------------
# browsing Reac database (line 12) we identified some pts referred to gambling disorder
cases_gambling = Reac[pt%in%c("gambling","gambling disorder")]$primaryid
# visualize most reported drugs with gambling disorder
View(Drug[primaryid%in%cases_gambling][,.N,by="substance"])
# visualize absolute frequencies of drugs reported with gambling disorder
View(Drug[primaryid%in%cases_death][,.N,by="substance"])
View(Demo)
# compare the sex characteristics between cases (gambling disorder) and the entire database
View(Demo[,.N,by="sex"][,perc:=N*100/sum(N)])
View(Demo[primaryid %in% cases_gambling][,.N,by="sex"][,perc:=N*100/sum(N)])
View(Demo[primaryid %in% cases_death][,.N,by="sex"][,perc:=N*100/sum(N)])
# compare the reporter characteristics between cases (gambling disorder) and the entire database
View(Demo[,.N,by="occp_cod"][,percentuale:=N*100/sum(N)])
View(Demo[primaryid %in% cases_gambling][,.N,by="occp_cod"][,percentuale:=N*100/sum(N)])
View(Demo[primaryid %in% cases_death][,.N,by="occp_cod"][,percentuale:=N*100/sum(N)])
Demo[primaryid %in% cases][,.N,by="age_in_days"]
Demo[primaryid %in% cases_gambling][,.N,by="age_in_days"]
# compare the age characteristics between cases (gambling disorder) and the entire database
View(Demo[,.N,by="age_in_days"])
View(Demo[primaryid %in% cases_gambling][,.N,by="age_in_days"])
# create a new variable containing the age in years and round it to unit
Demo[,age:=round(age_in_days/365)]
View(Demo[,.N,by="age"])
View(Demo[primaryid %in% cases][,.N,by="age"])
View(Demo[primaryid %in% cases_gambling][,.N,by="age"])
# visualize summary statistics (since age is a continuous variable)
summary(Demo$age)
summary(Demo[primaryid %in% cases]$age)
summary(Demo[primaryid %in% cases_gambling]$age)
# compare the weight characteristics between cases (gambling disorder) and the entire database with summary statistics
summary(Demo$wt_in_kgs)
summary(Demo[primaryid %in% cases_gambling]$wt_in_kgs)
# case study 2 reports with symmetrical drug-related intertriginous and flexural exanthema as adverse event
cases_symm = Reac[pt=="symmetrical drug-related intertriginous and flexural exanthema"]$primaryid
# case study 4: reports with dronabinol as drug
cases_dronab = Drug[substance=="dronabinol"]$primaryid
# case study 5: reports with brodalumab as drug
cases_brod = Drug[substance=="brodalumab"]$primaryid
# selection of a reference group: all reports with indication for psoriasis
RG = Indi[indi_pt=="psoriasis"]$primaryid
# compare the sex characteristics between cases (brodalumab) and the reference group (psoriasis)
View(Demo[primaryid %in% RG][,.N,by="sex"][,percentuale:=N*100/sum(N)])
View(Demo[primaryid %in% cases_brod][,.N,by="sex"][,percentuale:=N*100/sum(N)])
# compare the reporter characteristics between cases (brodalumab) and the reference group (psoriasis)
View(Demo[primaryid %in% RG][,.N,by="occp_cod"][,percentuale:=N*100/sum(N)])
View(Demo[primaryid %in% cases_brod][,.N,by="occp_cod"][,percentuale:=N*100/sum(N)])
# compare the age characteristics between cases (brodalumab) and the reference group (psoriasis)
# create a variable for age in years
summary(Demo[primaryid %in% RG]$age)
summary(Demo[primaryid %in% cases_brod]$age)
# compare the weigth characteristics between cases (brodalumab) and the reference group (psoriasis)
summary(Demo[primaryid %in% RG]$wt_in_kgs)
summary(Demo[primaryid %in% cases_brod]$wt_in_kgs)
# visualize absolute frequencies of adverse reactions reported with brodalumab
View(Reac[primaryid %in% cases_brod][,.N,by="pt"])
# import packages --------------------------------------------------------------
library(DiAna)
# upload FAERS data ------------------------------------------------------------
import("DEMO","23Q1")
import("DRUG","23Q1")
import("REAC","23Q1")
import("INDI","23Q1")
# data visualization -----------------------------------------------------------
# visualize the absolute frequencies of adverse events reported in all the FAERS
View(Reac[,.N,by="pt"])
# visualize the absolute frequencies of drugs reported in all the FAERS
View(Drug[,.N,by="substance"])
# case study 1: reports with death as adverse event ----------------------------
# browsing Reac database (line 12) we identified some pts referred to death
# narrow selection
cases_death = Reac[pt=="death"]$primaryid # 664268 pts
# broad selection
cases_death = Reac[pt %in% c("death", "sudden death")]$primaryid # 673627 pids
# case study 2 reports with symmetrical drug-related intertriginous and flexural exanthema as adverse event ------------
cases_symm = Reac[pt=="symmetrical drug-related intertriginous and flexural exanthema"]$primaryid # 432 pids
# case study 3: reports with gambling as adverse event -------------------------
# browsing Reac database (line 12) we identified some pts referred to gambling disorder
cases_gambling = Reac[pt%in%c("gambling","gambling disorder")]$primaryid # 4932 pids
# visualize absolute frequencies of drugs reported with gambling disorder
View(Drug[primaryid%in%cases_gambling][,.N,by="substance"])
# compare the sex characteristics between cases (gambling disorder) and the entire database
View(Demo[,.N,by="sex"][,perc:=N*100/sum(N)])
View(Demo[primaryid %in% cases_gambling][,.N,by="sex"][,perc:=N*100/sum(N)])
# compare the reporter characteristics between cases (gambling disorder) and the entire database
View(Demo[,.N,by="occp_cod"][,perc:=N*100/sum(N)])
View(Demo[primaryid %in% cases_gambling][,.N,by="occp_cod"][,perc:=N*100/sum(N)])
# compare the age characteristics between cases (gambling disorder) and the entire database
View(Demo[,.N,by="age_in_days"])
View(Demo[primaryid %in% cases_gambling][,.N,by="age_in_days"])
# create a new variable containing the age in years and round it to unit
Demo[,age:=round(age_in_days/365)]
View(Demo[,.N,by="age"])
View(Demo[primaryid %in% cases_gambling][,.N,by="age"])
# visualize summary statistics (since age is a continuous variable)
summary(Demo$age)
summary(Demo[primaryid %in% cases_gambling]$age)
# compare the weight characteristics between cases (gambling disorder) and the entire database with summary statistics
summary(Demo$wt_in_kgs)
summary(Demo[primaryid %in% cases_gambling]$wt_in_kgs)
# case study 4: reports with dronabinol as drug --------------------------------
cases_dronab = Drug[substance=="dronabinol"]$primaryid # 8851 pids
# case study 5: reports with brodalumab as drug --------------------------------
cases_brod = Drug[substance=="brodalumab"]$primaryid # 2850 pids
# visualize absolute frequencies of adverse reactions reported with brodalumab
View(Reac[primaryid %in% cases_brod][,.N,by="pt"])
# selection of a reference group: all reports with indication for psoriasis
RG = Indi[indi_pt=="psoriasis"]$primaryid
# compare the sex characteristics between cases (brodalumab) and the reference group (psoriasis)
View(Demo[primaryid %in% RG][,.N,by="sex"][,percentuale:=N*100/sum(N)])
View(Demo[primaryid %in% cases_brod][,.N,by="sex"][,percentuale:=N*100/sum(N)])
# compare the reporter characteristics between cases (brodalumab) and the reference group (psoriasis)
View(Demo[primaryid %in% RG][,.N,by="occp_cod"][,percentuale:=N*100/sum(N)])
View(Demo[primaryid %in% cases_brod][,.N,by="occp_cod"][,percentuale:=N*100/sum(N)])
# compare the age characteristics between cases (brodalumab) and the reference group (psoriasis)
# create a variable for age in years
summary(Demo[primaryid %in% RG]$age)
summary(Demo[primaryid %in% cases_brod]$age)
# compare the weigth characteristics between cases (brodalumab) and the reference group (psoriasis)
summary(Demo[primaryid %in% RG]$wt_in_kgs)
summary(Demo[primaryid %in% cases_brod]$wt_in_kgs)
describe_sample <- function(pids_cases, pids_nocases=NULL, drug=NULL, file_name = "Descriptives.xlsx",
vars=c("sex","Submission","Reporter",
"age_range", "Outcome", "country",
"continent", "age_in_years",
"wt_in_kgs","Reactions",
"Indications","Substances","year","role_cod", "time_to_onset"),
substances=T, indications=T, reactions=T, num_most_reported=5, reac_selected=NA,
list_pids=list(), method="independence_test",
quarter = "23Q1"){
# import data if now already uploaded
pids_tot <- union(pids_cases, pids_nocases)
temp <- import("DEMO", quarter = quarter, pids = pids_tot)
import("OUTC", quarter = quarter, pids = pids_tot)
import("REAC", quarter = quarter, pids = pids_tot)
import("INDI", quarter = quarter, pids = pids_tot)
import("DRUG", quarter = quarter, pids = pids_tot)
import("THER", quarter = quarter, pids = pids_tot)
temp[,sex:=ifelse(sex=="F","Female",ifelse(sex=="M","Male",NA))]
temp[,Submission:=ifelse(rept_cod%in%c("30DAY","5DAY","EXP"),"Expedited",ifelse(rept_cod=="PER","Periodic","Direct"))]
temp[,Reporter:=ifelse(occp_cod=="CN","Consumer",ifelse(occp_cod=="MD","Physician",ifelse(occp_cod=="HP","Healthcare practitioner",ifelse(occp_cod=="PH","Pharmacist",ifelse(occp_cod=="LW","Lawyer",ifelse(occp_cod=="OT","Other",NA))))))]
temp[,age_in_years:=age_in_days/365]
temp[,age_range:=cut(age_in_days,c(0,28,730,4380,6570,10950,18250,23725,27375,31025,36500,73000),include.lowest = TRUE,right=FALSE,
labels=c("Neonate (<28d)","Infant (28d-<2y)","Child (2y-<12y)","Teenager (12y-<18y)","Adult (18y-<30y)","Adult (30y-<50y)",
"Adult (50y-<65y)", "Elderly (65y-<75y)","Elderly (75y-<85y)","Elderly (85y-<100y)","Elderly (≥100y)"))]
temp <- Outc[,.(Outcome=max(outc_cod)),by="primaryid"][temp,on="primaryid"]
temp[is.na(Outcome)]$Outcome <- "Non Serious"
levels(temp$Outcome) <- c("Other serious","Congenital anomaly","Hospitalization","Required intervention","Disability","Life threatening","Death","Non Serious")
temp$Outcome <- factor(temp$Outcome,levels=c("Death","Life threatening","Disability","Required intervention","Hospitalization","Congenital anomaly","Other serious","Non Serious"),ordered=TRUE)
country_codes <- setDT(read_delim(paste0(paste0(here(), "/external_sources/Countries.csv")), ";", escape_double = FALSE, trim_ws = TRUE))[,.(country=Country_Name,continent=Continent_Name)] %>% distinct()
temp[, country := ifelse(is.na(as.character(occr_country)), as.character(reporter_country), as.character(occr_country))]
temp <- country_codes[temp,on="country"]
temp$country <- as.factor(temp$country)
temp$continent <- factor(temp$continent,levels = c("North America","Europe","Asia","South America","Oceania","Africa"),ordered = TRUE)
temp <- Reac[,.N,by="primaryid"][,.(primaryid,Reactions=N)][temp,on="primaryid"]
temp <- Drug[,.N,by="primaryid"][,.(primaryid,Substances=N)][temp,on="primaryid"]
temp <- Indi[,.N,by="primaryid"][,.(primaryid,Indications=N)][temp,on="primaryid"]
temp_tto <- Drug[Ther,on=c("primaryid","drug_seq")][substance%in%drug]
temp_tto[,role_cod:=max(role_cod),by="primaryid"]
temp_tto <- temp_tto[!is.na(time_to_onset) & time_to_onset>=0]
temp_tto <- temp_tto[, .(time_to_onset = max(time_to_onset)), by = "primaryid"]
temp <- temp_tto[temp,on="primaryid"]
temp$time_to_onset <- as.numeric(temp$time_to_onset)
temp[,year:= as.factor(ifelse(!is.na(event_dt),
as.numeric(substr(event_dt,1,4)), ifelse(!is.na(init_fda_dt),
as.numeric(substr(init_fda_dt,1,4)), as.numeric(substr(fda_dt,1,4)))))]
# descriptive only cases
if(is.null(pids_nocases)){
#add the max role_cod for the drug
if(!is.null(drug)){
temp_drug <- Drug[primaryid%in%pids_tot][substance%in%drug][,role_cod:=factor(role_cod,levels = c("C","I","SS","PS"),ordered=TRUE)][,.(role_cod=max(role_cod)),by="primaryid"]
temp <- left_join(temp,temp_drug)
} else {
vars=c("sex","Submission","Reporter",
"age_range", "Outcome", "country",
"continent", "age_in_years",
"wt_in_kgs","Reactions",
"Indications","Substances","year")
print("Variables role_cod and time_to_onset not considered")
}
# select the vars
temp <- temp[,..vars]
t <- temp %>%
tbl_summary(statistic=list(
all_continuous()~ "{median} ({p25}-{p75}) [{min}-{max}]",
all_categorical()~ "{n};{p}"), digits=colnames(temp)~c(0,2)) #%>%
#bold_labels()
#format the table
gt_table <- t %>% as_tibble()
tempN_cases <- as.numeric(gsub("\\*\\*","",gsub(".*N = ", "", colnames(gt_table)[[2]])))
gt_table <- gt_table %>% separate(get(colnames(gt_table)[[2]]),
sep = ";",
into = c("N_cases","%_cases"))
gt_table <- rbind(c("N",tempN_cases,""),gt_table)
#save it to the excel
writexl::write_xlsx(gt_table, file_name)
import_ATC()
if(substances==T){
temp_subs <- ATC[,.(Class4,Class1,substance)][Drug[primaryid%in%pids_tot],on="substance"][!substance%in%drug][,.(Class1,Class4,primaryid)] %>% distinct()
drug_shown <- head(temp_subs[,.N,by="Class4"][order(-N)][!is.na(Class4)]$Class4,num_most_reported)
temp_subs$total <- length(pids_tot)
temp_subs <- temp_subs[,.N,by=c("Class4","total")]
temp_subs <- temp_subs[Class4%in%drug_shown][order(-N)][,perc:=round(N/total*100,2)]
write.csv2(temp_subs,"substances.csv")
}
import_MedDRA()
if(reactions==T){
temp_reac <- MedDRA[,.(soc=def,hlt,pt)][Reac[primaryid%in%pids_tot],on="pt"][!pt%in%reac_selected][,.(soc, hlt,primaryid,tot=length(pids_tot))] %>% distinct()
hlt_shown <- head(temp_reac[,.N,by="hlt"][order(-N)]$hlt,num_most_reported)
temp_reac <- temp_reac[,tot:=length(pids_tot)][,.N,by=c("hlt","tot")]
temp_reac <- temp_reac[hlt%in%hlt_shown][order(-N)][,perc:=round(N/tot*100,2)]
write.csv2(temp_reac,"reactions.csv")
}
if(indications==T){
temp_indi <- MedDRA[,.(soc=def,hlt,indi_pt=pt)][Indi[primaryid%in%pids_tot],on="indi_pt"][!indi_pt%in%reac_selected][,.(soc, hlt,primaryid,tot=length(pids_tot))] %>% distinct()
hlt_shown <- head(temp_indi[,.N,by="hlt"][order(-N)]$hlt,num_most_reported)
temp_indi <- temp_indi[,tot:=length(pids_tot)][,.N,by=c("hlt","tot")]
temp_indi <- temp_indi[hlt%in%hlt_shown][order(-N)][,perc:=round(N/tot*100,2)]
write.csv2(temp_indi,"indications.csv")
}
} else {
# descriptives cases and non-cases
vars=c(vars,"Group",names(list_pids))
temp[,Group:=ifelse(primaryid%in%pids_cases,"Cases","Non-Cases")]
if(method=="goodness_of_fit"){temp <- rbindlist(list(temp,temp[Group=="Cases"][,Group:="Non-Cases"]))}
if(!is.null(names(list_pids))){
for (n in 1:length(list_pids)){
temp[[names(list_pids)[[n]]]] <- temp$primaryid%in%list_pids[[n]]
}
}
#add the max role_cod for the drug
if(!is.null(drug)){
temp_drug <- Drug[primaryid%in%pids_tot][substance%in%drug][,role_cod:=factor(role_cod,levels = c("C","I","SS","PS"),ordered=TRUE)][,.(role_cod=max(role_cod)),by="primaryid"]
temp <- left_join(temp,temp_drug)
} else {
vars=c("sex","Submission","Reporter",
"age_range", "Outcome", "country",
"continent", "age_in_years",
"wt_in_kgs","Reactions",
"Indications","Substances","year", "Group")
print("Variables role_cod and time_to_onset not considered")
}
temp <- temp[,..vars]
#perform the descriptive analysis
t <- temp %>%
tbl_summary(by=Group, statistic=list(
all_continuous()~ "{median} ({p25}-{p75}) [{min}-{max}] {p_nonmiss}}",
all_continuous2()~ "{median} ({p25}-{p75}) [{min}-{max}] {p_nonmiss}}",
all_categorical()~ "{n};{p}"),
digits=colnames(temp)~c(0,2))%>% add_p(
test = list(all_categorical() ~ "fisher.test.simulate.p.values"),  # this applies the custom test to all categorical variables
pvalue_fun =function(x)style_pvalue(x, digits = 3)
)  %>%
add_q("holm") %>%
bold_labels()
#format the table
gt_table <- t %>% as_tibble()
colnames(gt_table)
tempN_cases <- as.numeric(gsub(".*N = ", "", colnames(gt_table)[[2]]))
tempN_controls <- as.numeric(gsub(",","",gsub(".*N = ", "", colnames(gt_table)[[3]])))
gt_table <- gt_table %>% separate(get(colnames(gt_table)[[2]]),
sep = ";",
into = c("N_cases","%_cases"))
gt_table <- gt_table %>% separate(get(colnames(gt_table)[[4]]),
sep = ";",
into = c("N_controls","%_controls"))
gt_table <- rbind(c("N",tempN_cases,"",tempN_controls,"","",""),gt_table)
#save it to the excel
writexl::write_xlsx(gt_table, file_name)
}
}
library(DiAna)
import("DEMO", "23Q1")
pids_cases <- sample(Demo, 1000)
pids_cases <- sample(Demo$primaryid, 1000)
pids_nocases <- sample(Demo[!primaryid%in%pids_cases]$primaryid, 2000)
describe_sample(pids_cases = pids_cases, pids_nocases = pids_nocases)
library(here)
describe_sample(pids_cases = pids_cases, pids_nocases = pids_nocases)
setwd("C:/Users/valentina.giunchi2/Downloads")
library(readxl)
library(data.table)
data <- read_xlsx("Classificazione antibiotici.xlsx")
View(data)
View(data[,.N, by="CLASS_3"])
data <- setDT(read_xlsx("Classificazione antibiotici.xlsx"))
View(data[,.N, by="CLASS_3"])
View(data[,.N, by=c("ATC_3","CLASS_3")])
table(data$ATC_2)
drug_selected = "paracetamo"
drug_selected = "paracetamol"
reac_selected = "nausea"
library(DiAna)
import("DRUG", quarter="23Q1")
import("REAC", quarter="23Q1")
meddra_level = "pt"
restriction = "none"
ROR_minimum_cases = 3
ROR_threshold = 1
IC_threshold = 0
if (length(restriction) > 1) {
temp_d <- temp_d[primaryid %in% restriction] %>% droplevels()
temp_r <- temp_r[primaryid %in% restriction] %>% droplevels()
}
if (meddra_level != "pt" & meddra_level != "custom") {
if (!exists("MedDRA")) {
stop("The MedDRA dictionary is not uploaded.
Without it, only analyses at the PT level are possible")
}
temp_r <- MedDRA[, c(meddra_level, "pt"), with = FALSE][temp_r, on = "pt"]
}
if (meddra_level == "custom") {
df_custom <- data.table(
custom = rep(names(reac_selected), lengths(reac_selected)),
pt = unlist(reac_selected)
)
temp_r <- df_custom[temp_r, on = "pt"]
reac_selected <- names(reac_selected)
}
temp_r <- temp_r[, c(meddra_level, "primaryid"), with = FALSE] %>% distinct()
temp_d = Drug
temp_r = Reac
temp_r <- temp_r[, c(meddra_level, "primaryid"), with = FALSE] %>% distinct()
temp_d <- temp_d[, .(substance, primaryid)] %>% distinct()
TOT <- length(unique(temp_d$primaryid))
temp_d1 <- temp_d[substance %in% drug_selected][, .(primaryid_substance = list(primaryid)), by = "substance"]
temp_r1 <- temp_r[get(meddra_level) %in% reac_selected][, .(primaryid_event = list(primaryid)), by = meddra_level]
colnames(temp_r1) <- c("event", "primaryid_event")
results <- setDT(expand.grid("substance" = unlist(drug_selected), "event" = unlist(reac_selected)))
results <- results[temp_d1, on = "substance"]
results <- results[temp_r1, on = "event"]
results <- results[, D_E := as.numeric(map2(primaryid_substance, primaryid_event, \(x, y)length(intersect(x, y))))]
results <- results[, D_nE := as.numeric(map2(primaryid_substance, primaryid_event, \(x, y)length(setdiff(x, y))))]
results <- results[, D := D_E + D_nE]
results <- results[, nD_E := as.numeric(map2(primaryid_event, primaryid_substance, \(x, y)length(setdiff(x, y))))]
results <- results[, E := D_E + nD_E]
results <- results[, nD_nE := TOT - (D_E + D_nE + nD_E)]
ROR <- lapply(seq(1:nrow(results)), function(x) {
tab <- as.matrix(data.table(
E = c(results$nD_E[[x]], results$nD_E[[x]]),
nE = c(results$D_nE[[x]], results$nD_nE[[x]])
))
or <- questionr::odds.ratio(tab)
ROR_median <- floor(or$OR * 100) / 100
ROR_lower <- floor(or$`2.5 %` * 100) / 100
ROR_upper <- floor(or$`97.5 %` * 100) / 100
p_value_fisher <- or$p
return(list(ROR_median, ROR_lower, ROR_upper, p_value_fisher))
})
results <- results[, ROR_median := as.numeric(map(ROR, \(x) x[[1]]))][
, ROR_lower := as.numeric(map(ROR, \(x) x[[2]]))
][
, ROR_upper := as.numeric(map(ROR, \(x) x[[3]]))
][
, p_value_fisher := as.numeric(map(ROR, \(x) x[[4]]))
]
results <- results[, Bonferroni := results$p_value_fisher * sum(results$D_E >= 3)]
IC <- lapply(seq(1:nrow(results)), function(x) {
IC_median <- log2((results$D_E[[x]] + .5) / (((results$D[[x]] * results$E[[x]]) / TOT) + .5))
IC_lower <- floor((IC_median - 3.3 * (results$D_E[[x]] + .5)^(-1 / 2) - 2 * (results$D_E[[x]] + .5)^(-3 / 2)) * 100) / 100
IC_upper <- floor((IC_median + 2.4 * (results$D_E[[x]] + .5)^(-1 / 2) - 0.5 * (results$D_E[[x]] + .5)^(-3 / 2)) * 100) / 100
IC_median <- floor(IC_median * 100) / 100
return(list(IC_median, IC_lower, IC_upper))
})
results <- results[, IC_median := as.numeric(map(IC, \(x) x[[1]]))][
, IC_lower := as.numeric(map(IC, \(x) x[[2]]))
][
, IC_upper := as.numeric(map(IC, \(x) x[[3]]))
]
results <- results[, label_ROR := paste0(ROR_median, " (", ROR_lower, "-", ROR_upper, ") [", D_E, "]")]
results <- results[, label_IC := paste0(IC_median, " (", IC_lower, "-", IC_upper, ") [", D_E, "]")]
results <- results[, Bonferroni := p_value_fisher < 0.05 / nrow(results[D_E >= ROR_minimum_cases])]
results <- results[, ROR_color := ifelse(D_E < ROR_minimum_cases, "not enough cases", ifelse(is.nan(ROR_lower), "all_associated",
ifelse(ROR_lower <= ROR_threshold, "no signal",
ifelse(Bonferroni == FALSE, "light signal",
"strong signal"
)
)
))]
results <- results[, IC_color := ifelse(is.nan(IC_lower), "all_associated",
ifelse(IC_lower <= IC_threshold, "no signal",
"strong signal"
)
)]
results <- results[, ROR_color := factor(ROR_color, levels = c("not enough cases", "no signal", "light signal", "strong signal"), ordered = TRUE)]
results <- results[, IC_color := factor(IC_color, levels = c("no signal", "strong signal"), ordered = TRUE)]
meddra_level = "custom"
if (length(restriction) > 1) {
temp_d <- temp_d[primaryid %in% restriction] %>% droplevels()
temp_r <- temp_r[primaryid %in% restriction] %>% droplevels()
}
if (meddra_level != "pt" & meddra_level != "custom") {
if (!exists("MedDRA")) {
stop("The MedDRA dictionary is not uploaded.
Without it, only analyses at the PT level are possible")
}
temp_r <- MedDRA[, c(meddra_level, "pt"), with = FALSE][temp_r, on = "pt"]
}
if (meddra_level == "custom") {
df_custom <- data.table(
custom = rep(names(reac_selected), lengths(reac_selected)),
pt = unlist(reac_selected)
)
temp_r <- df_custom[temp_r, on = "pt"]
reac_selected <- names(reac_selected)
}
temp_r <- temp_r[, c(meddra_level, "primaryid"), with = FALSE] %>% distinct()
drug_selected <- c("navitoclax","venetoclax")
git remote add DiAna_package https://github.com/fusarolimichele/DiAna_package
devtools::install_github("fusarolimichele/DiAna_package")
library(DiAna)
setup_DiAna()
here
here()
library(here)
library(DiAna)
setup_DiAna(quarter = "23Q3")
remove.packages("DiAna")
library(DiAna)
devtools::install_github("fusarolimichele/DiAna_package")
library(DiAna)
setup_DiAna(quarter = "23Q3")
devtools::install_github("fusarolimichele/DiAna_package")
library(DiAna)
help("DiAna")
remove.packages("DiAna")
devtools::install_github("fusarolimichele/DiAna_package")
devtools::install_github("fusarolimichele/DiAna_package")
install.packages("htmltools")
devtools::install_github("fusarolimichele/DiAna_package")
devtools::install_github("fusarolimichele/DiAna_package")
# Set up ----------------------------------------------------------------------
## upload DiAna ---------------------------------------------------------------
library(DiAna)
FAERS_version <- "24Q1"
## Import data ----------------------------------------------------------------
import("DEMO")
## Pregnancy algorithm EudraVigilane-------------------------------------------
pids_lt50 <- unique(Demo[age_in_days<365*50]$primaryid)
