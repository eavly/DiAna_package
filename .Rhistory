custom = rep(names(drug_selected), lengths(drug_selected)),
substance = unlist(drug_selected)
)
temp_d <- df_custom[temp_d, on = "substance"]
drug_selected <- names(drug_selected)
}
temp_r <- temp_r[, c(meddra_level, "primaryid"), with = FALSE] %>% distinct()
temp_d <- temp_d[, .(substance, primaryid)] %>% distinct()
TOT <- length(unique(temp_d$primaryid))
temp_d1 <- temp_d[substance %in% drug_selected][, .(primaryid_substance = list(primaryid)), by = "substance"]
temp_r1 <- temp_r[get(meddra_level) %in% reac_selected][, .(primaryid_event = list(primaryid)), by = meddra_level]
colnames(temp_r1) <- c("event", "primaryid_event")
results <- setDT(expand.grid("substance" = unlist(drug_selected), "event" = unlist(reac_selected)))
results <- results[temp_d1, on = "substance"]
results <- results[temp_r1, on = "event"]
results <- results[, D_E := as.numeric(map2(primaryid_substance, primaryid_event, \(x, y)length(intersect(x, y))))]
results <- results[, D_nE := as.numeric(map2(primaryid_substance, primaryid_event, \(x, y)length(setdiff(x, y))))]
results <- results[, D := D_E + D_nE]
results <- results[, nD_E := as.numeric(map2(primaryid_event, primaryid_substance, \(x, y)length(setdiff(x, y))))]
results <- results[, E := D_E + nD_E]
results <- results[, nD_nE := TOT - (D_E + D_nE + nD_E)]
ROR <- lapply(seq(1:nrow(results)), function(x) {
tab <- as.matrix(data.table(
E = c(results$nD_E[[x]], results$nD_E[[x]]),
nE = c(results$D_nE[[x]], results$nD_nE[[x]])
))
or <- questionr::odds.ratio(tab)
ROR_median <- floor(or$OR * 100) / 100
ROR_lower <- floor(or$`2.5 %` * 100) / 100
ROR_upper <- floor(or$`97.5 %` * 100) / 100
p_value_fisher <- or$p
return(list(ROR_median, ROR_lower, ROR_upper, p_value_fisher))
})
results <- results[, ROR_median := as.numeric(map(ROR, \(x) x[[1]]))][
, ROR_lower := as.numeric(map(ROR, \(x) x[[2]]))
][
, ROR_upper := as.numeric(map(ROR, \(x) x[[3]]))
][
, p_value_fisher := as.numeric(map(ROR, \(x) x[[4]]))
]
results <- results[, Bonferroni := results$p_value_fisher * sum(results$D_E >= 3)]
IC <- lapply(seq(1:nrow(results)), function(x) {
IC_median <- log2((results$D_E[[x]] + .5) / (((results$D[[x]] * results$E[[x]]) / TOT) + .5))
IC_lower <- floor((IC_median - 3.3 * (results$D_E[[x]] + .5)^(-1 / 2) - 2 * (results$D_E[[x]] + .5)^(-3 / 2)) * 100) / 100
IC_upper <- floor((IC_median + 2.4 * (results$D_E[[x]] + .5)^(-1 / 2) - 0.5 * (results$D_E[[x]] + .5)^(-3 / 2)) * 100) / 100
IC_median <- floor(IC_median * 100) / 100
return(list(IC_median, IC_lower, IC_upper))
})
results <- results[, IC_median := as.numeric(map(IC, \(x) x[[1]]))][
, IC_lower := as.numeric(map(IC, \(x) x[[2]]))
][
, IC_upper := as.numeric(map(IC, \(x) x[[3]]))
]
results <- results[, label_ROR := paste0(ROR_median, " (", ROR_lower, "-", ROR_upper, ") [", D_E, "]")]
results <- results[, label_IC := paste0(IC_median, " (", IC_lower, "-", IC_upper, ") [", D_E, "]")]
results <- results[, Bonferroni := p_value_fisher < 0.05 / nrow(results[D_E >= ROR_minimum_cases])]
results <- results[, ROR_color := ifelse(D_E < ROR_minimum_cases, "not enough cases", ifelse(is.nan(ROR_lower), "all_associated",
ifelse(ROR_lower <= ROR_threshold, "no signal",
ifelse(Bonferroni == FALSE, "light signal",
"strong signal"
)
)
))]
results <- results[, IC_color := ifelse(is.nan(IC_lower), "all_associated",
ifelse(IC_lower <= IC_threshold, "no signal",
"strong signal"
)
)]
results <- results[, ROR_color := factor(ROR_color, levels = c("not enough cases", "no signal", "light signal", "strong signal"), ordered = TRUE)]
results <- results[, IC_color := factor(IC_color, levels = c("no signal", "strong signal"), ordered = TRUE)]
}
library(devtools)
styler::style_dir()
document()
load_all()
remove.packages("DiAna")
install()
install()
entity="substance"
level="pt"
drug_role=c("PS","SS","I","C")
#' @import tidyverse
#'
#' @export
#'
#' @examples
#' \dontrun{
#' reporting_rates(pids, "reaction", "hlt")
#' reporting_rates(pids, "indication", "pt")
#' reporting_rates(pids, entity = "substance", level = "Class3")
#' }
reporting_rates <- function(pids_cases, entity = "reaction", level = "pt", drug_role=c("PS","SS","I","C")) {
if (entity == "reaction") {
temp <- import("REAC", pids = pids_cases, save_in_environment = FALSE)
} else if (entity == "indication") {
temp <- import("INDI", pids = pids_cases, save_in_environment = FALSE)[
, .(primaryid, pt = indi_pt)
][!pt %in% c(
"product used for unknown indication",
"therapeutic procedures nec",
"therapeutic procedures and supportive care nec"
)]
} else if (entity == "substance") {
temp <- distinct(import("DRUG", pids = pids_cases, save_in_environment = FALSE)[, .(primaryid, substance)])
}
if (level %in% c("hlt", "hlgt", "soc")) {
import_MedDRA()
temp <- distinct(distinct(MedDRA[, c("pt", level), with = FALSE])[
temp,
on = "pt"
][
, c("primaryid", level),
with = FALSE
])
}
if (entity == "substance" & level == "pt") {
level <- "substance"
}
if (entity == "substance" & level %in% c("Class1", "Class2", "Class3", "Class4")) {
import_ATC()[code == primary_code]
temp <- distinct(distinct(ATC[, c("substance", level), with = FALSE])[
temp[role_cod%in%drug_role],
on = "substance"
][
, c("primaryid", level),
with = FALSE
])
}
temp <- temp[, .N, by = get(level)][order(-N)][, perc := N / length(unique(temp$primaryid))]
colnames(temp) <- c(level, "N", "perc")
temp <- temp[, label := paste0(get(level), " (", round(perc * 100, 2), "%) [", N, "]")]
temp <- temp[, .(get(level), label, N)]
if (level != "substance") {
temp[is.na(V1)]$label <- NA
}
colnames(temp) <- c(
level, paste0("label_", level),
paste0("N_", level)
)
return(temp)
}
FAERS_version <- "23Q1"
drug_selected <- "aripiprazole" # define the drug of interest
reac_selected <- list( # define the events of interest
"gambling disorder",
"hypersexuality",
"compulsive shopping",
"hyperphagia",
"kleptomania",
"bipolar disorder",
"headache"
)
import("DRUG") # import FAERS drug information
library(DiAna) # access DiAna
import("DRUG") # import FAERS drug information
import("REAC") # import FAERS reaction information
DPA_df <- disproportionality_analysis( # perform disproportionality analysis
drug_selected,
reac_selected
)
render_forest(DPA_df, "IC",
row = "event"
)
library(devtools)
styler::style_dir()
document()
load_all()
install()
remove.packages("DiAna")
library(devtools)
styler::style_dir()
build_readme()
load_all()
build_readme()
library(DiAna) # access DiAna
FAERS_version <- "23Q1"
drug_selected <- "aripiprazole" # define the drug of interest
reac_selected <- list( # define the events of interest
"gambling disorder",
"hypersexuality",
"compulsive shopping",
"hyperphagia",
"kleptomania",
"bipolar disorder",
"headache"
)
import("DRUG") # import FAERS drug information
check()
install()
build_readme()
build_readme()
FAERS_version <- "23Q1"
import("DRUG") # import FAERS drug information
library(devtools)
load_all()
build_readme()
.Last.error
build_readme()
#' @import tidyverse
#'
#' @export
#'
#' @examples
#' \dontrun{
#' reporting_rates(pids, "reaction", "hlt")
#' reporting_rates(pids, "indication", "pt")
#' reporting_rates(pids, entity = "substance", level = "Class3")
#' }
reporting_rates <- function(pids_cases, entity = "reaction", level = "pt", drug_role = c("PS", "SS", "I", "C")) {
if (entity == "reaction") {
temp <- import("REAC", pids = pids_cases, save_in_environment = FALSE)
} else if (entity == "indication") {
temp <- import("INDI", pids = pids_cases, save_in_environment = FALSE)[
, .(primaryid, pt = indi_pt)
][!pt %in% c(
"product used for unknown indication",
"therapeutic procedures nec",
"therapeutic procedures and supportive care nec"
)]
} else if (entity == "substance") {
temp <- distinct(import("DRUG", pids = pids_cases, save_in_environment = FALSE)[, .(primaryid, substance)])
}
if (level %in% c("hlt", "hlgt", "soc")) {
import_MedDRA()
temp <- distinct(distinct(MedDRA[, c("pt", level), with = FALSE])[
temp,
on = "pt"
][
, c("primaryid", level),
with = FALSE
])
}
if (entity == "substance" & level == "pt") {
level <- "substance"
}
if (entity == "substance" & level %in% c("Class1", "Class2", "Class3", "Class4")) {
import_ATC()[code == primary_code]
temp <- distinct(distinct(ATC[, c("substance", level), with = FALSE])[
temp[role_cod %in% drug_role],
on = "substance"
][
, c("primaryid", level),
with = FALSE
])
}
temp <- temp[, .N, by = get(level)][order(-N)][, perc := N / length(unique(temp$primaryid))]
colnames(temp) <- c(level, "N", "perc")
temp <- temp[, label := paste0(get(level), " (", round(perc * 100, 2), "%) [", N, "]")]
temp <- temp[, .(get(level), label, N)]
if (level != "substance") {
temp[is.na(V1)]$label <- NA
}
colnames(temp) <- c(
level, paste0("label_", level),
paste0("N_", level)
)
return(temp)
}
import("DEMO")
FAERS_version <- "23Q1"
import("DEMO")
import("DRUG")
pids_aripiprazole <- Drug[substance=="aripiprazole"]$primaryid
pids_aripiprazole <- unique(Drug[substance=="aripiprazole"]$primaryid)
reporting_rates(pids_aripiprazole,entity="substance")
reporting_rates(pids_aripiprazole,entity="substance", drug_role = c("PS","SS"))
if (entity=="substance"){
temp <- temp[role_cod%in%drug_role]
if (level=="pt") {
level <- "substance"
} else if {
#' @import tidyverse
#'
#' @export
#'
#' @examples
#' \dontrun{
#' reporting_rates(pids, "reaction", "hlt")
#' reporting_rates(pids, "indication", "pt")
#' reporting_rates(pids, entity = "substance", level = "Class3")
#' }
reporting_rates <- function(pids_cases, entity = "reaction", level = "pt", drug_role = c("PS", "SS", "I", "C")) {
if (entity == "reaction") {
temp <- import("REAC", pids = pids_cases, save_in_environment = FALSE)
} else if (entity == "indication") {
temp <- import("INDI", pids = pids_cases, save_in_environment = FALSE)[
, .(primaryid, pt = indi_pt)
][!pt %in% c(
"product used for unknown indication",
"therapeutic procedures nec",
"therapeutic procedures and supportive care nec"
)]
} else if (entity == "substance") {
temp <- distinct(import("DRUG", pids = pids_cases, save_in_environment = FALSE)[, .(primaryid, substance)])
}
if (level %in% c("hlt", "hlgt", "soc")) {
import_MedDRA()
temp <- distinct(distinct(MedDRA[, c("pt", level), with = FALSE])[
temp,
on = "pt"
][
, c("primaryid", level),
with = FALSE
])
}
if (entity=="substance"){
temp <- temp[role_cod%in%drug_role]
if (level=="pt") {
level <- "substance"
} else if (level %in% c("Class1", "Class2", "Class3", "Class4")) {
import_ATC()[code == primary_code]
temp <- distinct(distinct(ATC[, c("substance", level), with = FALSE])[
temp[role_cod %in% drug_role],
on = "substance"
][
, c("primaryid", level),
with = FALSE
])
}
}
temp <- temp[, .N, by = get(level)][order(-N)][, perc := N / length(unique(temp$primaryid))]
colnames(temp) <- c(level, "N", "perc")
temp <- temp[, label := paste0(get(level), " (", round(perc * 100, 2), "%) [", N, "]")]
temp <- temp[, .(get(level), label, N)]
if (level != "substance") {
temp[is.na(V1)]$label <- NA
}
colnames(temp) <- c(
level, paste0("label_", level),
paste0("N_", level)
)
return(temp)
}
reporting_rates(pids_aripiprazole,entity="substance")
reporting_rates <- function(pids_cases, entity = "reaction", level = "pt", drug_role = c("PS", "SS", "I", "C")) {
if (entity == "reaction") {
temp <- import("REAC", pids = pids_cases, save_in_environment = FALSE)
} else if (entity == "indication") {
temp <- import("INDI", pids = pids_cases, save_in_environment = FALSE)[
, .(primaryid, pt = indi_pt)
][!pt %in% c(
"product used for unknown indication",
"therapeutic procedures nec",
"therapeutic procedures and supportive care nec"
)]
} else if (entity == "substance") {
temp <- distinct(import("DRUG", pids = pids_cases, save_in_environment = FALSE)[
role_cod%in%drug_role][, .(primaryid, substance)])
}
if (level %in% c("hlt", "hlgt", "soc")) {
import_MedDRA()
temp <- distinct(distinct(MedDRA[, c("pt", level), with = FALSE])[
temp,
on = "pt"
][
, c("primaryid", level),
with = FALSE
])
}
if (entity=="substance"){
if (level=="pt") {
level <- "substance"
} else if (level %in% c("Class1", "Class2", "Class3", "Class4")) {
import_ATC()[code == primary_code]
temp <- distinct(distinct(ATC[, c("substance", level), with = FALSE])[
temp[role_cod %in% drug_role],
on = "substance"
][
, c("primaryid", level),
with = FALSE
])
}
}
reporting_rates(pids_aripiprazole,entity="substance")
#' @import tidyverse
#'
#' @export
#'
#' @examples
#' \dontrun{
#' reporting_rates(pids, "reaction", "hlt")
#' reporting_rates(pids, "indication", "pt")
#' reporting_rates(pids, entity = "substance", level = "Class3")
#' }
reporting_rates <- function(pids_cases, entity = "reaction", level = "pt", drug_role = c("PS", "SS", "I", "C")) {
if (entity == "reaction") {
temp <- import("REAC", pids = pids_cases, save_in_environment = FALSE)
} else if (entity == "indication") {
temp <- import("INDI", pids = pids_cases, save_in_environment = FALSE)[
, .(primaryid, pt = indi_pt)
][!pt %in% c(
"product used for unknown indication",
"therapeutic procedures nec",
"therapeutic procedures and supportive care nec"
)]
} else if (entity == "substance") {
temp <- distinct(import("DRUG", pids = pids_cases, save_in_environment = FALSE)[
role_cod%in%drug_role][, .(primaryid, substance)])
}
if (level %in% c("hlt", "hlgt", "soc")) {
import_MedDRA()
temp <- distinct(distinct(MedDRA[, c("pt", level), with = FALSE])[
temp,
on = "pt"
][
, c("primaryid", level),
with = FALSE
])
}
if (entity=="substance"){
if (level=="pt") {
level <- "substance"
} else if (level %in% c("Class1", "Class2", "Class3", "Class4")) {
import_ATC()[code == primary_code]
temp <- distinct(distinct(ATC[, c("substance", level), with = FALSE])[
temp[role_cod %in% drug_role],
on = "substance"
][
, c("primaryid", level),
with = FALSE
])
}
}
temp <- temp[, .N, by = get(level)][order(-N)][, perc := N / length(unique(temp$primaryid))]
colnames(temp) <- c(level, "N", "perc")
temp <- temp[, label := paste0(get(level), " (", round(perc * 100, 2), "%) [", N, "]")]
temp <- temp[, .(get(level), label, N)]
if (level != "substance") {
temp[is.na(V1)]$label <- NA
}
colnames(temp) <- c(
level, paste0("label_", level),
paste0("N_", level)
)
return(temp)
}
reporting_rates(pids_aripiprazole,entity="substance")
reporting_rates(pids_aripiprazole,entity="substance",drug_role = c("PS","SS"))
drug_indi <- NA
length(drug_indi)
drug_indi <- c("a","b")
!is.na(drug_indi)
#' @import tidyverse
#'
#' @export
#'
#' @examples
#' \dontrun{
#' reporting_rates(pids, "reaction", "hlt")
#' reporting_rates(pids, "indication", "pt")
#' reporting_rates(pids, entity = "substance", level = "Class3")
#' }
reporting_rates <- function(pids_cases, entity = "reaction", level = "pt", drug_role = c("PS", "SS", "I", "C"),drug_indi=NA) {
if (entity == "reaction") {
temp <- import("REAC", pids = pids_cases, save_in_environment = FALSE)
} else if (entity == "indication") {
temp <- import("INDI", pids = pids_cases, save_in_environment = FALSE)
if(sum(!is.na(drug_indi))>0){
temp <- import("DRUG", pids = pids_cases, save_in_environment = FALSE)[
temp,on=c("primaryid","drug_seq")][substance%in%drug_indi]
}
temp <- temp[, .(primaryid, pt = indi_pt)][!pt %in% c(
"product used for unknown indication",
"therapeutic procedures nec",
"therapeutic procedures and supportive care nec"
)]
} else if (entity == "substance") {
temp <- distinct(import("DRUG", pids = pids_cases, save_in_environment = FALSE)[
role_cod%in%drug_role][, .(primaryid, substance)])
}
if (level %in% c("hlt", "hlgt", "soc")) {
import_MedDRA()
temp <- distinct(distinct(MedDRA[, c("pt", level), with = FALSE])[
temp,
on = "pt"
][
, c("primaryid", level),
with = FALSE
])
}
if (entity=="substance"){
if (level=="pt") {
level <- "substance"
} else if (level %in% c("Class1", "Class2", "Class3", "Class4")) {
import_ATC()[code == primary_code]
temp <- distinct(distinct(ATC[, c("substance", level), with = FALSE])[
temp[role_cod %in% drug_role],
on = "substance"
][
, c("primaryid", level),
with = FALSE
])
}
}
temp <- temp[, .N, by = get(level)][order(-N)][, perc := N / length(unique(temp$primaryid))]
colnames(temp) <- c(level, "N", "perc")
temp <- temp[, label := paste0(get(level), " (", round(perc * 100, 2), "%) [", N, "]")]
temp <- temp[, .(get(level), label, N)]
if (level != "substance") {
temp[is.na(V1)]$label <- NA
}
colnames(temp) <- c(
level, paste0("label_", level),
paste0("N_", level)
)
return(temp)
}
reporting_rates(pids_aripiprazole,entity="indication")
reporting_rates(pids_aripiprazole,entity="indication",drug_indi = "aripiprazole")
reporting_rates(pids_aripiprazole,entity="indication",drug_indi = c("aripiprazole","citalopram"))
styler::style_dir()
document()
