suppressWarnings(temp[, Group := ifelse(primaryid %in% pids_cases, "Cases", "Non-Cases")])
if (method == "goodness_of_fit") {
temp <- rbindlist(list(temp, temp[Group == "Cases"][, Group := "Non-Cases"]))
}
if (!is.null(names(list_pids))) {
for (n in 1:length(list_pids)) {
temp[[names(list_pids)[[n]]]] <- temp$primaryid %in% list_pids[[n]]
}
}
temp <- temp[, ..vars]
# perform the descriptive analysis
suppressMessages(t <- temp %>%
tbl_summary(
by = Group, statistic = list(
all_continuous() ~ "{median} ({p25}-{p75}) [{min}-{max}] {p_nonmiss}",
all_continuous2() ~ "{median} ({p25}-{p75}) [{min}-{max}] {p_nonmiss}",
all_categorical() ~ "{n};{p}"
),
digits = colnames(temp) ~ c(0, 2)
) %>%
add_p(
test = list(all_categorical() ~ "fisher.test.simulate.p.values"), # this applies the custom test to all categorical variables
pvalue_fun = function(x) style_pvalue(x, digits = 3)
) %>%
add_q("holm") %>%
bold_labels())
# format the table
gt_table <- t %>% as_tibble()
tempN_cases <- as.numeric(gsub(",", "", gsub(".*N = ", "", colnames(gt_table)[[2]])))
tempN_controls <- as.numeric(gsub(",", "", gsub(".*N = ", "", colnames(gt_table)[[3]])))
suppressWarnings(gt_table <- gt_table %>% separate(get(colnames(gt_table)[[2]]),
sep = ";",
into = c("N_cases", "%_cases")
))
suppressWarnings(gt_table <- gt_table %>% separate(get(colnames(gt_table)[[4]]),
sep = ";",
into = c("N_controls", "%_controls")
))
gt_table <- rbind(c("N", tempN_cases, "", tempN_controls, "", "", ""), gt_table)
# save it to the excel
writexl::write_xlsx(gt_table, file_name)
}
}
descriptive(pids_aripiprazole)
descriptive(pids)
library(devtools)
styler::style_dir()
document()
remove.packages("DiAna")
library(devtools)
load_all()
install()
### Libraries used-----------------
library(tidyverse)
library(data.table)
library(NetworkToolbox)
library(visNetwork)
library(qgraph)
library(igraph)
library(IsingFit)
library("DiAna")
import("DRUG","23Q1")
import("REAC","23Q1")
import("DEMO","23Q1")
pids <- sample(unique(Reac[pt=="poisoning deliberate"]$primaryid),2000)
pids <- sample(unique(Reac[pt=="poisoning deliberate"]$primaryid))
pids <- unique(Reac[pt=="poisoning deliberate"]$primaryid)
network_analysis <- function(pids, entity="reaction",remove_singlet=TRUE,
remove_negative_edges=TRUE,quarter="23Q1",
file_name="network.tiff",width=1500, height=1500){
if (entity=="reaction") {
df <-  import("REAC",quarter = quarter,pids = pids)[,.(primaryid,pt)]
} else if (entity=="indication") {
df <- import("INDI",quarter=quarter,pids = pids)
} else if (entity == "substance") {
df <- import("DRUG",quarter=quarter,pids = pids)[,.(primaryid,substance)]}
df <- distinct(df)
binary_data <- df
binary_data[,value:=1]
binary_data <- binary_data %>% pivot_wider(names_from = pt,
values_from = value)
row_names <- binary_data$primaryid
binary_data <- binary_data %>% select(-primaryid) %>% as.matrix()
rownames(binary_data) <- row_names
binary_data[is.na(binary_data[,])] <- 0
g1 <- IsingFit::IsingFit(binary_data)
G_igraph <- igraph::graph.adjacency(g1$weiadj,mode = "undirected",weighted = TRUE)
if (remove_singlet){G_igraph <- igraph::delete.vertices(simplify(G_igraph), igraph::degree(G_igraph)==0)}
if (remove_negative_edges){G_igraph <- igraph::delete.edges(G_igraph,which(E(G_igraph)$weight<0))}
L0=layout_nicely(G_igraph)
comm_lv <- cluster_louvain(G_igraph)
t <- as.numeric(names(table(membership(comm_lv))[table(membership(comm_lv))==1]))
cols=comm_lv$membership
cols[cols%in% t] <- 100
G_igraph <- set_vertex_attr(G_igraph,"color",value = cols)
G_igraph <- set_vertex_attr(G_igraph,"group",value = factor(cols))
labs1 <- df[,.N,by="pt"][order(-N)][,.(s=pt,s2=N)]
labs <- data.table(s=V(G_igraph)$name)
labs <- left_join(labs,labs1)
G_igraph <- set_vertex_attr(G_igraph,"size",value = log(labs$s2))
G_igraph <- set_vertex_attr(G_igraph,"label",value = labs$s)
tiff(file_name,width = width,height=height,res=300)
plot(comm_lv,G_igraph,layout=L0,label=labs$s,vertex.label.dist=1,                           # Distance between the label and the vertex
vertex.label.degree=pi/2)
dev.off()
}
network_analysis(pids=pids)
if (entity=="reaction") {
df <-  import("REAC",quarter = quarter,pids = pids)[,.(primaryid,pt)]
} else if (entity=="indication") {
df <- import("INDI",quarter=quarter,pids = pids)
} else if (entity == "substance") {
df <- import("DRUG",quarter=quarter,pids = pids)[,.(primaryid,substance)]}
entity="reaction"
remove_singlet=TRUE
remove_negative_edges=TRUE
quarter="23Q1"
FAERS_version <- "23Q1"
pids <- unique(Reac[pt=="poisoning deliberate"]$primaryid)
if (entity=="reaction") {
df <-  import("REAC",pids = pids)[,.(primaryid,pt)]
} else if (entity=="indication") {
df <- import("INDI",pids = pids)
} else if (entity == "substance") {
df <- import("DRUG",pids = pids)[,.(primaryid,substance)]}
View(df)
df <- distinct(df)
binary_data <- df
binary_data[,value:=1]
binary_data <- binary_data %>% pivot_wider(names_from = pt,
values_from = value)
row_names <- binary_data$primaryid
binary_data <- binary_data %>% select(-primaryid) %>% as.matrix()
View(binary_data)
rownames(binary_data) <- row_names
binary_data[is.na(binary_data[,])] <- 0
g1 <- IsingFit::IsingFit(binary_data)
View(df)
View(binary_data)
g1 <- IsingFit::IsingFit(binary_data)
View(binary_data)
binary_data <- df
binary_data[,value:=1]
binary_data$value <- 1
binary_data <- binary_data %>% pivot_wider(names_from = pt,
values_from = value)
row_names <- binary_data$primaryid
binary_data <- binary_data %>% select(-primaryid) %>% as.matrix()
rownames(binary_data) <- row_names
binary_data[is.na(binary_data[,])] <- 0
g1 <- IsingFit::IsingFit(binary_data)
install.packages(c("credentials", "curl", "foreign", "gert", "IsingFit", "KernSmooth", "lattice", "Matrix", "mgcv", "nlme", "pak", "pkgload", "plyr", "psych", "spatial", "survival", "vroom"))
library(tidyverse)
library(data.table)
library(NetworkToolbox)
library(visNetwork)
library(qgraph)
library(igraph)
library(IsingFit)
g1 <- IsingFit::IsingFit(binary_data)
G_igraph <- igraph::graph.adjacency(g1$weiadj,mode = "undirected",weighted = TRUE)
if (remove_singlet){G_igraph <- igraph::delete.vertices(simplify(G_igraph), igraph::degree(G_igraph)==0)}
if (remove_negative_edges){G_igraph <- igraph::delete.edges(G_igraph,which(E(G_igraph)$weight<0))}
L0=layout_nicely(G_igraph)
comm_lv <- cluster_louvain(G_igraph)
t <- as.numeric(names(table(membership(comm_lv))[table(membership(comm_lv))==1]))
cols=comm_lv$membership
cols[cols%in% t] <- 100
G_igraph <- set_vertex_attr(G_igraph,"color",value = cols)
G_igraph <- set_vertex_attr(G_igraph,"group",value = factor(cols))
labs1 <- df[,.N,by="pt"][order(-N)][,.(s=pt,s2=N)]
labs <- data.table(s=V(G_igraph)$name)
labs <- left_join(labs,labs1)
G_igraph <- set_vertex_attr(G_igraph,"size",value = log(labs$s2))
G_igraph <- set_vertex_attr(G_igraph,"label",value = labs$s)
plot(comm_lv,G_igraph,layout=L0,label=labs$s,vertex.label.dist=1,                           # Distance between the label and the vertex
vertex.label.degree=pi/2)
file_name="network.tiff"
width=1500
height=1500
tiff(file_name,width = width,height=height,res=300)
plot(comm_lv,G_igraph,layout=L0,label=labs$s,vertex.label.dist=1,                           # Distance between the label and the vertex
vertex.label.degree=pi/2)
dev.off()
usethis::use_vignette("Basic usage of DiAna")
usethis::use_vignette("Basic_usage_of_DiAna")
# Set up ----------------------------------------------------------------------
dir.create("projects/getting_started_tutorial")
FAERS_version <- "23Q1"
DiAna_path <- here::here()
project_path <- paste0(DiAna_path,"/projects/getting_started_tutorial/")
# Set up ----------------------------------------------------------------------
dir.create("projects/getting_started_tutorial")
FAERS_version <- "23Q1"
DiAna_path <- here::here()
project_path <- paste0(DiAna_path,"/projects/getting_started_tutorial/")
# Set up ----------------------------------------------------------------------
dir.create("projects/getting_started_tutorial")
# Set up ----------------------------------------------------------------------
dir.create("projects/getting_started_tutorial")
DiAna_path <- here::here()
project_path <- paste0(DiAna_path,"/projects/getting_started_tutorial/")
FAERS_version <- "23Q1"
# Set up ----------------------------------------------------------------------
dir.create("projects/getting_started_tutorial")
here()
here::here()
# Set up ----------------------------------------------------------------------
dir.create("projects/getting_started_tutorial/")
# Set up ----------------------------------------------------------------------
dir.create("projects/tutorial")
# Set up ----------------------------------------------------------------------
dir.create("projects/tutorial", recursive = TRUE)
FAERS_version <- "23Q1"
DiAna_path <- here::here()
project_path <- paste0(DiAna_path,"/projects/getting_started_tutorial/")
dir.create("projects/tutorial", recursive = TRUE)
FAERS_version <- "23Q1"
DiAna_path <- here::here()
project_path <- paste0(DiAna_path,"/projects/tutorial/")
## Packages -------------------------------------------------------------------
library(DiAna)
## Input FAERS ---------------------------------------------------------------
Drug <- import("DRUG")
Reac <- import("REAC")
Demo <- import("DEMO")
import_ATC()
import_MedDRA()
pids_drugs <- Drug[substance %in% drugs_selected]
drugs_selected <- "haloperidol"
events_selected <- "pneumonia"
pids_drugs <- Drug[substance %in% drugs_selected]
pids_drugs <- unique(Drug[substance %in% drugs_selected])
pids_drugs <- unique(Drug[substance %in% drugs_selected]$primaryid)
pids_events <- unique(Reac[pt %in% events_selected]$primaryid)
pids_cases <- intersect(pids_drugs,pids_events)
#' @return Two csv files with individual cases information:
#'         one general with a row per ICSR,
#'         and one with drug information and multiple rows per ICSR.
#'
#' @examples
#' \dontrun{
#' retrieve(c(1, 2, 3), "output_data")
#' }
#'
#' @export
retrieve <- function(pids, file_name = "individual_cases", quarter = FAERS_version) {
## this function is intended to retrieve all the useful information inherent
## to a specific group of primaryids, to allow for in-deep case-by case
## evaluation and clinical reasoning.
## Args: pids= primaryids of interest
##      file_name
path_MedDRA <- paste0(here(), "/external_sources/meddra_primary.csv")
## Reactions
t_reac <- import("REAC", pids = pids, quarter = quarter, save_in_environment = FALSE)
if (file.exists(path_MedDRA)) {
import_MedDRA()
t_reac <- MedDRA[t_reac, on = "pt"][order(soc)]
t_reac <- t_reac[, .(
pt = paste0(" (", paste0(pt, collapse = "; "), ")"),
pt_rechallenged = paste0(
" (",
paste0(setdiff(unique(drug_rec_act), NA),
collapse = "; "
), ")"
)
),
by = c("primaryid", "hlgt")
]
}
t_reac <- t_reac[, .(
pt = paste0(pt, collapse = "; "),
pt_rechallenged = gsub("\\(\\);|;\\(\\)|\\(\\)",
"",
paste0(pt_rechallenged,
collapse = "; "
),
fixed = FALSE
)
),
by = c("primaryid")
]
## Drug
t_drug <- import("DRUG", pids = pids, quarter = quarter, save_in_environment = FALSE)
import_ATC()[code == primary_code]
t_drug <- ATC[t_drug, on = "substance"][order(-substance)][order(-Class1)]
t_drug1 <- t_drug[, .(substance = paste0("(", paste0(unique(substance),
collapse = "; "
), ")")),
by = c("primaryid", "Class3")
]
t_drug1 <- t_drug1[, .(substance = paste0(substance, collapse = "; ")), by = "primaryid"]
t <- t_drug1[t_reac, on = "primaryid"]
## Demo
t <- import("DEMO", pids = pids, quarter = quarter, save_in_environment = FALSE)[
, age_in_years := round(age_in_days / 365)
][
t,
on = "primaryid"
]
t <- import("DEMO_SUPP", pids = pids, quarter = quarter, save_in_environment = FALSE)[order(-rpsr_cod)][
, .(rpsr_cod = paste0(rpsr_cod, collapse = "; ")),
by = "primaryid"
][
t,
on = "primaryid"
]
## Outc
t <- import("OUTC", pids = pids, quarter = quarter, save_in_environment = FALSE)[order(-outc_cod)][
, .(outc_cod = paste0(outc_cod, collapse = "; ")),
by = "primaryid"
][
t,
on = "primaryid"
]
## Save the database with general information
write.csv2(t, paste0(file_name, ".csv"))
## Further Drug information
t_drug2 <- t_drug[, .(substance = paste0(unique(substance), collapse = ",")),
by = c("primaryid", "drug_seq", "role_cod")
]
t_drug2 <- merge(import("DRUG_NAME", pids = pids, quarter = quarter),
t_drug2,
by = c("primaryid", "drug_seq"), all = TRUE
)
t_drug2 <- import("THER", pids = pids, quarter = quarter, save_in_environment = FALSE)[t_drug2, on = c("primaryid", "drug_seq")]
t_drug2 <- import("DOSES", pids = pids, quarter = quarter, save_in_environment = FALSE)[t_drug2, on = c("primaryid", "drug_seq")]
t_drug2 <- import("DRUG_SUPP", pids = pids, quarter = quarter, save_in_environment = FALSE)[t_drug2, on = c("primaryid", "drug_seq")]
t_drug2 <- import("INDI", pids = pids, quarter = quarter, save_in_environment = FALSE)[indi_pt != "product used for unknown indication"][
t_drug2,
on = c("primaryid", "drug_seq")
]
t_drug2 <- t_drug2[, dose := gsub("NA", "", paste0(dose_amt, " ", dose_unit, " ", dose_freq))][
, cum_dose := gsub("NA", "", paste0(cum_dose_unit, " ", cum_dose_chr))
] %>%
select(-c(dose_amt, dose_unit, dose_freq, drug_seq, cum_dose_unit, cum_dose_chr))
## Save the database with further drug information
write.csv2(t_drug2, paste0(file_name, "_drug.csv"))
}
retrieve(pids_cases,file_name = paste0(project_path,"individual_cases"))
path_MedDRA <- paste0(here::here(), "/external_sources/meddra_primary.csv")
file.exists(path_MedDRA)
retrieve(pids_cases,file_name = paste0(project_path,"individual_cases"))
#' @return Two csv files with individual cases information:
#'         one general with a row per ICSR,
#'         and one with drug information and multiple rows per ICSR.
#'
#' @examples
#' \dontrun{
#' retrieve(c(1, 2, 3), "output_data")
#' }
#'
#' @export
retrieve <- function(pids, file_name = "individual_cases", quarter = FAERS_version) {
## this function is intended to retrieve all the useful information inherent
## to a specific group of primaryids, to allow for in-deep case-by case
## evaluation and clinical reasoning.
## Args: pids= primaryids of interest
##      file_name
path_MedDRA <- paste0(here::here(), "/external_sources/meddra_primary.csv")
## Reactions
t_reac <- import("REAC", pids = pids, quarter = quarter, save_in_environment = FALSE)
if (file.exists(path_MedDRA)) {
import_MedDRA()
t_reac <- MedDRA[t_reac, on = "pt"][order(soc)]
t_reac <- t_reac[, .(
pt = paste0(" (", paste0(pt, collapse = "; "), ")"),
pt_rechallenged = paste0(
" (",
paste0(setdiff(unique(drug_rec_act), NA),
collapse = "; "
), ")"
)
),
by = c("primaryid", "hlgt")
]
}
t_reac <- t_reac[, .(
pt = paste0(pt, collapse = "; "),
pt_rechallenged = gsub("\\(\\);|;\\(\\)|\\(\\)",
"",
paste0(pt_rechallenged,
collapse = "; "
),
fixed = FALSE
)
),
by = c("primaryid")
]
## Drug
t_drug <- import("DRUG", pids = pids, quarter = quarter, save_in_environment = FALSE)
import_ATC()[code == primary_code]
t_drug <- ATC[t_drug, on = "substance"][order(-substance)][order(-Class1)]
t_drug1 <- t_drug[, .(substance = paste0("(", paste0(unique(substance),
collapse = "; "
), ")")),
by = c("primaryid", "Class3")
]
t_drug1 <- t_drug1[, .(substance = paste0(substance, collapse = "; ")), by = "primaryid"]
t <- t_drug1[t_reac, on = "primaryid"]
## Demo
t <- import("DEMO", pids = pids, quarter = quarter, save_in_environment = FALSE)[
, age_in_years := round(age_in_days / 365)
][
t,
on = "primaryid"
]
t <- import("DEMO_SUPP", pids = pids, quarter = quarter, save_in_environment = FALSE)[order(-rpsr_cod)][
, .(rpsr_cod = paste0(rpsr_cod, collapse = "; ")),
by = "primaryid"
][
t,
on = "primaryid"
]
## Outc
t <- import("OUTC", pids = pids, quarter = quarter, save_in_environment = FALSE)[order(-outc_cod)][
, .(outc_cod = paste0(outc_cod, collapse = "; ")),
by = "primaryid"
][
t,
on = "primaryid"
]
## Save the database with general information
write.csv2(t, paste0(file_name, ".csv"))
## Further Drug information
t_drug2 <- t_drug[, .(substance = paste0(unique(substance), collapse = ",")),
by = c("primaryid", "drug_seq", "role_cod")
]
t_drug2 <- merge(import("DRUG_NAME", pids = pids, quarter = quarter),
t_drug2,
by = c("primaryid", "drug_seq"), all = TRUE
)
t_drug2 <- import("THER", pids = pids, quarter = quarter, save_in_environment = FALSE)[t_drug2, on = c("primaryid", "drug_seq")]
t_drug2 <- import("DOSES", pids = pids, quarter = quarter, save_in_environment = FALSE)[t_drug2, on = c("primaryid", "drug_seq")]
t_drug2 <- import("DRUG_SUPP", pids = pids, quarter = quarter, save_in_environment = FALSE)[t_drug2, on = c("primaryid", "drug_seq")]
t_drug2 <- import("INDI", pids = pids, quarter = quarter, save_in_environment = FALSE)[indi_pt != "product used for unknown indication"][
t_drug2,
on = c("primaryid", "drug_seq")
]
t_drug2 <- t_drug2[, dose := gsub("NA", "", paste0(dose_amt, " ", dose_unit, " ", dose_freq))][
, cum_dose := gsub("NA", "", paste0(cum_dose_unit, " ", cum_dose_chr))
] %>%
select(-c(dose_amt, dose_unit, dose_freq, drug_seq, cum_dose_unit, cum_dose_chr))
## Save the database with further drug information
write.csv2(t_drug2, paste0(file_name, "_drug.csv"))
}
retrieve(pids_cases,file_name = paste0(project_path,"individual_cases"))
getwd()
DiAna_path <- getwd()
project_path <- paste0(DiAna_path,"/projects/tutorial/")
retrieve(pids_cases,file_name = paste0(project_path,"individual_cases"))
kable(Demo)
knitr::kable(Demo)
knitr::kable(head(Demo,10))
knitr::kable(head(Demo,10))
knitr::kable(head(Demo),caption="Example of demographics data")
remove.packages("DiAna")
library(devtools)
styler::style_dir()
document()
load_all()
check()
check()
# Set up ----------------------------------------------------------------------
dir.create("projects/tutorial", recursive = TRUE)
FAERS_version <- "23Q1"
DiAna_path <- getwd()
project_path <- paste0(DiAna_path, "/projects/tutorial/")
## Packages -------------------------------------------------------------------
library(DiAna)
## Input FAERS ---------------------------------------------------------------
Drug <- import("DRUG")
Reac <- import("REAC")
Demo <- import("DEMO")
Indi <- import("INDI")
library(devtools)
styler::style_dir()
document()
load_all()
check()
## Packages -------------------------------------------------------------------
library(DiAna)
## Input FAERS ---------------------------------------------------------------
Drug <- import("DRUG")
library(DiAna)
setup_DiAna(quarter = "23Q1")
dir.create("projects/tutorial", recursive = TRUE)
FAERS_version <- "23Q1"
DiAna_path <- getwd()
project_path <- paste0(DiAna_path, "/projects/tutorial/")
## Packages -------------------------------------------------------------------
library(DiAna)
## Input FAERS ---------------------------------------------------------------
Drug <- import("DRUG")
getwd()
check()
# Set up ----------------------------------------------------------------------
dir.create(here::here(),"projects/tutorial", recursive = TRUE)
load_all()
check()
library(devtools)
styler::style_dir()
document()
load_all()
install()
library(devtools)
styler::style_dir()
document()
load_all()
check()
check()
install()
